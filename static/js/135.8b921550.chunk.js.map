{"version":3,"file":"static/js/135.8b921550.chunk.js","mappings":"2SAoJA,EAzFgB,SAACA,GAEb,IAkCIC,EAlCJ,GAA8BC,EAAAA,EAAAA,UAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAEQC,EAA+CX,EAA/CW,WAAYC,EAAmCZ,EAAnCY,YAAaC,EAAsBb,EAAtBa,QAASC,EAAad,EAAbc,SAEpCC,EA1DW,CACb,EAAK,cACL,EAAK,WACL,EAAK,SACL,EAAK,aACL,EAAK,SACL,EAAK,WACL,EAAK,OACL,EAAK,SACL,EAAK,kBACL,GAAM,cACN,GAAM,UA+CuBJ,GAE3BK,EA5Cc,SAACC,GACrB,IAqBMC,EArBa,CACf,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,GAAM,YACN,GAAM,aAUgBD,GACpBE,EARkB,CACpB,OAAU,OACV,KAAQ,OACR,KAAQ,SACR,UAAa,OAImBD,GAEpC,OACI,kBAAME,UAAU,+DAA+DC,MAAO,CAAC,SAAY,OAAQC,WAAYH,EAAaI,MAAO,SAA3I,UACSL,GACD,iBAAME,UAAU,kBAAhB,6BAgBSI,CAAgBb,GA0BrC,IAVAc,EAAAA,EAAAA,YAAU,WACN,IAAKhB,EAAS,CACV,IACIiB,GADM,IAAIC,MACOC,UAAY,IACjCpB,EAAeqB,SAASxB,EAAWqB,IACnCtB,EAAWD,EAAU,MAE1B,CAACE,EAAUI,EAASF,EAAaJ,IAGhCM,EACAR,GACI,oDAED,CACH,IAAI6B,EAAQD,SAAStB,EAAc,MAC/BwB,EAAUF,SAAUtB,EAAc,KAAQ,IAC1CyB,EAAUH,SAAStB,EAAc,IAEjCwB,EAAU,KACVA,EAAU,IAAMA,EAAQE,YAExBD,EAAU,KACVA,EAAU,IAAMA,EAAQC,YAG5BhC,GACI,4CAAY6B,EAAZ,IAAoBC,EAApB,IAA8BC,KAItC,OACI,SAAC,KAAD,CAAKE,GAAG,KAAKb,MAAO,CAACc,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,MAAO,QAA7F,UACI,SAAC,KAAD,CAAMlB,UAAU,YAAYC,MAAO,CAACiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,SAAhF,UACM,SAAC,KAAD,WACE,UAAC,KAAD,CAAKH,UAAU,mBAAf,WACQ,UAAC,KAAD,CAAKc,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,QAArD,cACMvB,MAEN,SAAC,KAAD,CAAKqB,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,QAArD,SACKrB,KAEL,SAAC,KAAD,CAAKmB,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAArD,SACKpB,KAEL,UAAC,KAAD,CAAKkB,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAArD,oBACYxB,MAEZ,SAAC,KAAD,CAAKsB,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAArD,SACKnC,KAEL,SAAC,KAAD,CAAKiC,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAArD,UACI,SAAC,KAAD,CAAQG,UAAW9B,EAAS+B,QAlEzC,WACX,GAAI/B,EAAS,CACTK,IACAJ,GAAW,GACX,IAAI+B,EAAM,IAAId,KACVD,EAAaG,SAASY,EAAIb,UAAY,KAC1CtB,EAAYoB,EAAa,SA4DwCH,MAAM,UAAnD,+B,kGC/ChC,EA1BiB,SAACvB,GAEd,IAAQW,EAAyDX,EAAzDW,WAAY+B,EAA6C1C,EAA7C0C,kBAAmBC,EAA0B3C,EAA1B2C,cAAeC,EAAW5C,EAAX4C,OAElDC,EArBkB,SAAClC,GAcvB,MAbwB,CACpB,EAAK,CAAC,kBAAmBmC,EAAMC,EAAQC,GACvC,EAAK,CAAC,kBAAmBF,EAAMC,EAAQC,GACvC,EAAK,CAAC,kBAAmBF,EAAMC,EAAQC,GACvC,EAAK,CAAC,kBAAmBF,EAAMC,EAAQC,GACvC,EAAK,CAAC,kBAAmBC,EAAMC,EAAQF,GACvC,EAAK,CAAC,kBAAmBC,EAAMC,EAAQF,GACvC,EAAK,CAAC,kBAAmBC,EAAMC,EAAQF,GACvC,EAAK,CAAC,oBAAqBG,EAASC,EAASJ,GAC7C,EAAK,CAAC,oBAAqBG,EAASC,EAASJ,GAC7C,GAAM,CAAC,mBAAoBK,EAAOC,EAAMN,GACxC,GAAM,CAAC,mBAAoBK,EAAOC,EAAMN,IAEnBrC,GAOJ4C,CAAkB5C,GAEnC6C,EAAgBb,EAAgBE,EAAe,GAAK,cAExD,OACI,SAAC,KAAD,CAAKX,GAAG,IAAIb,MAAO,CAACc,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,MAAO,QAA5F,UACI,SAAC,KAAD,CAAMlB,UAAU,4BAA4BC,MACxC,CAACmC,cAAeA,EAAed,kBAAmBA,EAClDe,wBAAyB,WACzBC,gBAAgB,OAAD,OAASb,EAAeD,GAAxB,KACfe,mBAAoB,SACpBC,eAAgB,QAASrC,MAAO,QAASsC,YAAa,wBAAyBvB,MAAO,OAL1F,UAOI,SAAC,KAAD,WACI,gBAAKjB,MAAO,CAAEyC,OAAQ,kB,uDCpB1C,EAtDMC,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAY/D,GAAQ,IAAD,yBACjB,cAAMA,IACDgE,MAAQ,CACXC,UAAU,GAGZ,EAAKC,OAAS,EAAKA,OAAOC,MAAZ,WANG,EAkDlB,OA3CA,8BAED,WACEC,KAAKpE,MAAMqE,eACZ,oBAED,WAEE,IAAIC,EAsBJ,OApBEA,EADEF,KAAKpE,MAAMuE,KAEX,iEACiCH,KAAKpE,MAAMwE,SAD5C,aAC8D,kBAD9D,kHAGmD,kBAHnD,0CASA,uGACqE,kBADrE,sFAEoF,kBAFpF,kHAImD,kBAJnD,0CAWA,UAAC,KAAD,CAAOC,OAAQL,KAAKpE,MAAM0E,KAAMR,OAAQE,KAAKF,OAAQ9C,UAAWgD,KAAKpE,MAAMoB,UAAW6C,SAAUG,KAAKJ,MAAMC,SAA3G,WACE,SAAC,KAAD,CAAa5C,MAAO,CAACC,WAAY,UAAWC,MAAO,QAASsC,YAAa,WAAaK,OAAQE,KAAKF,OAAnG,0BACA,SAAC,KAAD,CAAW7C,MAAO,CAACC,WAAY,UAAWC,MAAO,SAAjD,SACG+C,KAEH,UAAC,KAAD,CAAajD,MAAO,CAACC,WAAY,UAAWC,MAAO,QAASsC,YAAa,WAAzE,WACE,SAAC,KAAD,CAAQtB,SAAU6B,KAAKJ,MAAMW,sBAAuBpD,MAAM,UAAUiB,QAAS4B,KAAKF,OAAlF,gBAEU,cAInB,EAnDGH,CAAkBa,EAAAA,W,GCAQA,EAAAA,U,0EC8LhC,EA9IsB,SAAC5E,GAAW,IAAD,EAErByE,EAAuBzE,EAAvByE,OAAQJ,EAAerE,EAAfqE,WAUhB,OACI,+BACJ,SAAC,KAAD,CAAOI,OAAQA,EAAQP,OANR,WACXG,KAKmCJ,UAAU,EAAM7C,UAAU,iCACjEC,MAAO,CAACiB,MAAO,OAAQwB,OAAQ,QAD/B,UAIA,UAAC,KAAD,CAAW1C,UAAU,WAArB,WACI,SAAC,KAAD,CAAKA,UAAU,mBAAmBC,MAAO,CAACiB,MAAO,QAAjD,UACI,UAAC,KAAD,CAAKJ,GAAG,KAAR,WACI,gBACId,UAAU,gDACVC,MAAO,CACHqC,gBAAgB,OAAD,OAASmB,EAAT,KACflB,mBAAoB,SACpBC,eAAgB,QAChBrC,MAAO,QAASsC,YAAa,UAC7BC,OAAQ,SAPhB,UAUI,gBAAKzC,MAAO,CAACyC,OAAQ,SAAUgB,IAAKC,EAAcC,IAAK,QAI3D,iBACA5D,UAAU,qGACVC,MAAO,CACHC,WAAW,OAAD,OAAS2D,EAAT,KACVtB,mBAAoB,SACpBC,eAAgB,QAChBtB,MAAO,MACPwB,OAAQ,OAPZ,WAUI,gBAAKzC,MAAO,CAACiB,MAAO,OAAQwC,IAAKI,EAAcF,IAAK,MACpD,iBAAMG,MAAM,kBAAZ,0BAKZ,SAAC,KAAD,CAAK/D,UAAU,mBAAmBC,MAAO,CAACiB,MAAO,QAAjD,UACI,SAAC,KAAD,CAAKJ,GAAG,KAAR,UACI,gBACIb,OAAK,QACDC,WAAY,kBADX,aAEW,wEAHpB,UAMI,gBAAKD,MAAO,CAACiB,MAAO,OAAQwC,IAAKI,EAAcF,IAAK,YAKhE,SAAC,KAAD,CAAK5D,UAAU,mBAAmBC,MAAO,CAACiB,MAAO,QAAjD,UACI,SAAC,KAAD,CAAKJ,GAAG,KAAR,UAEI,iBAAKb,MAAO,CACRE,MAAO,QACPD,WAAY,yEAFhB,WAMI,iBAAKF,UAAU,mDAAf,WAEA,gBAAKA,UAAU,+DAAf,UACQ,UAAC,KAAD,CAAMA,UAAU,YAAYC,MAAO,CAC/BiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,QAC5C6D,OAAQ,qBAFZ,WAGI,iBACAhE,UAAU,6FACVC,MAAO,CACHC,WAAW,OAAD,OAAS2D,EAAT,KACVtB,mBAAoB,SACpBC,eAAgB,QAChBtB,MAAO,MACPwB,OAAQ,OAPZ,WAUI,gBAAKzC,MAAO,CAACiB,MAAO,OAAQwC,IAAKI,EAAcF,IAAK,MACpD,iBAAMG,MAAM,kBAAZ,qBAEJ,SAAC,KAAD,CAASE,KAAG,EAAC/C,MAAM,MAAMwC,IAAKhC,EAAMkC,IAAI,yBACxC,SAAC,KAAD,CAAU5D,UAAU,cAApB,UACI,gBAAK0D,IAAKQ,EAAUN,IAAK,aAKrC,gBAAK5D,UAAU,+DAAf,UACI,UAAC,KAAD,CAAMA,UAAU,YAAYC,MAAO,CAC/BiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,QAC5C6D,OAAQ,qBAFZ,WAGI,iBACAhE,UAAU,6FACVC,MAAO,CACHC,WAAW,OAAD,OAAS2D,EAAT,KACVtB,mBAAoB,SACpBC,eAAgB,QAChBtB,MAAO,MACPwB,OAAQ,OAPZ,WAUI,gBAAKzC,MAAO,CAACiB,MAAO,OAAQwC,IAAKS,EAAcP,IAAK,MACpD,iBAAMG,MAAM,kBAAZ,qBAEJ,SAAC,KAAD,CAASE,KAAG,EAAC/C,MAAM,MAAMwC,IAAKhC,EAAMkC,IAAI,yBACxC,SAAC,KAAD,CAAU5D,UAAU,cAApB,UACI,gBAAK0D,IAAKQ,EAAUN,IAAK,gBAOzC,mBAAQ3D,OAAK,GACTC,WAAY,mBADH,sBAEG,yEAFH,kBAGD,KAHC,GAIVF,UAAU,oBAJb,iC,sBCepB,EA/KsB,SAACpB,GAEnB,OAA8BE,EAAAA,EAAAA,UAAS,QAAvC,eAAOsF,EAAP,KAAgBC,EAAhB,KACA,GAAwCvF,EAAAA,EAAAA,UAAS,CAC/CW,QAAS,OACTF,WAAY,IACZ+B,kBAAmB,KACnBC,eAAe,EACfC,OAAQ,IALV,eAAO8C,EAAP,KAAqBC,EAArB,KAQA,GAAkCzF,EAAAA,EAAAA,WAAS,GAA3C,eAAO0F,EAAP,KAAkBC,EAAlB,KACA,GAAsB3F,EAAAA,EAAAA,WAAS,GAA/B,eAAOqE,EAAP,KAAYuB,EAAZ,KACA,GAAgC5F,EAAAA,EAAAA,UAAS,GAAzC,eAAOsE,EAAP,KAAiBuB,EAAjB,KAEA,GAA0D7F,EAAAA,EAAAA,WAAS,GAAnE,eAA8B8F,GAA9B,WAEMC,EAAS,mCAAG,sGACY,IAAxBC,OAAOC,aADK,uBAEdV,EAAW,QAFG,kBAGP,IAHO,uBAKSS,OAAOE,aAAaC,IAAIC,cALjC,cAKVC,EALU,gBAMUL,OAAOM,YAAYC,QAAQC,UAAUH,EAAW,IAAII,OAN9D,OAMVC,EANU,OAOZC,EAAW,GAPC,UASFC,MAAMjF,SAAS+E,IAAcG,QAT3B,kEASPC,EATO,kBAUOd,OAAOM,YAAYC,QAAQQ,oBAAoBV,EAAW,GAAIS,GAAGL,OAVxE,eAUVO,EAVU,iBAWMhB,OAAOM,YAAYC,QAAQU,WAAWD,GAAUP,OAXtD,QAWVS,EAXU,OAYdP,EAASQ,KAAK,CAACH,SAAAA,EAAUE,QAAAA,IAZX,iJAchB3B,EAAWoB,GAdK,iEAAH,sDAiBfpF,EAAAA,EAAAA,YAAU,WACQ,SAAZ+D,GACFS,OAIJ,IAuDIqB,EAvDExG,EAAQ,mCAAG,WAAOyG,GAAP,2EACfrB,OAAOsB,SAAS,EAAG,GACnB7B,EAAgB,CACd9E,QAAS0G,EAAUL,SACnBvG,WAAY4G,EAAUH,QAAQ,GAC9B1E,kBAAmB,KACnBC,eAAe,EACfC,OAAQ,IAIN6E,EAAOC,KAAKC,SACZ/E,EAAS6E,EAAO,GAAM,EAAI,EACf,EAEfG,QAAQC,IAAI7H,EAAM8H,cAEW,MAAzBP,EAAUH,QAAQ,IACpBtB,GAAO,GAEPC,EADIgC,EAAwB,IAAXnF,EAAe,EANnB,IAQboF,EAAAA,EAAAA,IAAkBD,IAGH,IAAXnF,EACFkD,GAAO,IAEPA,GAAO,GACPC,EAfW,IAgBXiC,EAAAA,EAAAA,IAhBW,IAoBfC,YAAW,WACTtC,EAAgB,CACd9E,QAAS0G,EAAUL,SACnBvG,WAAY4G,EAAUH,QAAQ,GAC9B1E,kBAAmB,KACnBC,eAAe,EACfC,OAAQ,MAET,KACHqF,YAAW,WACTtC,EAAgB,CACd9E,QAAS0G,EAAUL,SACnBvG,WAAY4G,EAAUH,QAAQ,GAC9B1E,kBAAmB,KACnBC,eAAe,EACfC,OAAQA,IAEViD,GAAa,KACZ,MAnDY,2CAAH,sDAwDd,IAA4B,IAAxBK,OAAOC,aACTmB,GACE,SAAC,KAAD,CAAKpF,GAAG,KAAKgG,GAAG,KAAK7G,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAMhB,UAAU,YAAYC,MAAO,CAACiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,SAAhF,UACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,WACE,gBAAKuD,IAAKqD,EAAcnD,IAAK,GAAI5D,UAAU,OAAOC,MAAO,CAACiB,MAAO,OAAQwB,OAAQ,UADnF,+DAQL,GAAgB,SAAZ0B,EACT8B,GACE,SAAC,KAAD,CAAKpF,GAAG,KAAKgG,GAAG,KAAK7G,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAMhB,UAAU,YAAYC,MAAO,CAACiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,SAAhF,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,UACE,SAAC,KAAD,CAAS6G,KAAK,OAAO7G,MAAM,eAE7B,SAAC,KAAD,CAAcF,MAAO,CAACE,MAAO,SAA7B,8DAKL,GAAuB,IAAnBiE,EAAQ6C,OACjBf,GACE,SAAC,KAAD,CAAKpF,GAAG,KAAKgG,GAAG,KAAK7G,MAAO,CAACc,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAMhB,UAAU,YAAYC,MAAO,CAACiB,MAAO,MAAOhB,WAAY,UAAWC,MAAO,SAAhF,UACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,gIAOL,CACL+F,EAAW,GADN,gBAEa9B,GAFb,yBAEM8C,EAFN,QAMCC,GAAgB1G,SAASyG,EAAIpB,UAAY,MAAMjF,WACnDqF,EAASD,MACP,SAAC,EAAD,CAA4B1G,WAAY2H,EAAIlB,QAAQ,GAAIxG,YAAa0H,EAAIlB,QAAQ,GAAIvG,QAAS0H,EAAczH,SAAU,kBAAMA,EAASwH,KAAvHA,EAAIpB,YANtB,2BAA4B,IAFvB,+BAaP,OACE,UAAC,EAAAsB,SAAD,YACE,SAAC,EAAAC,gBAAD,CAAiBpH,MAAO,CAACiB,MAAO,OAAQH,QAAS,OAAQC,eAAgB,UAAzE,UACE,SAAC,EAAAsG,cAAD,CAAeC,UAAU,MAAMC,WAAW,gBAAgBC,QAAQ,EAChEC,QAAS,KAAMC,OAAO,EAAOC,MAAM,EADrC,UAEE,UAAC,KAAD,CAAK5H,UAAU,mBAAmBC,MAAO,CAACiB,MAAO,OAAjD,WACE,SAAC,KAAD,CAAK4F,GAAG,KAAR,UACE,SAAC,KAAD,CAAM9G,UAAU,sBAAsBC,MAAO,CAACC,WAAY,WAA1D,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWD,MAAO,CAACE,MAAO,SAA1B,kCACA,gBAAKH,UAAU,aACf,SAAC,KAAD,CAAKA,UAAU,wBAAf,UACI,SAAC,EAAD,CAAUT,WAAY+E,EAAa/E,WAAY+B,kBAAmBgD,EAAahD,kBAAmBC,cAAe+C,EAAa/C,cAAeC,OAAQ8C,EAAa9C,kBAK3K0E,UAIP,SAAC,EAAD,CAAWjD,WAAY,kBAAMwB,GAAa,IAAQnB,KAAMkB,EAAWrB,IAAKA,EAAKC,SAAUA,KAEvF,SAAC,EAAD,CAAeH,WAAY,kBAAM2B,GAAyB,IAAQvB,QAAQ,QClLlF,IAoBA,EApBiB,SAAC,GAAc,EAAZwE,MAAa,IAEzBC,EAPR,WACE,OAA0BhJ,EAAAA,EAAAA,UAAS,GAAnC,eAAciJ,GAAd,WACA,OAAO,kBAAMA,GAAS,SAAAC,GAAK,OAAIA,EAAQ,MAKnBC,GAEpB,OACE,iCAEE,SAACC,EAAA,EAAD,CAAWJ,YAAa,kBAAMA,QAC9B,iBAAK9H,UAAU,WAAf,WACE,SAACmI,EAAA,EAAD,KACA,gBAAKnI,UAAU,kBAAf,UACE,gBAAKA,UAAU,sBAAf,UACE,SAAC,EAAD,gB","sources":["AppPages/FarmMode/Components/NftCard.js","AppPages/FarmMode/Components/Roulette.js","AppPages/FarmMode/Components/GameModal.js","AppPages/FarmMode/Components/InstructionsModal.js","AppPages/FarmMode/Components/RouletteModal.js","AppPages/FarmMode/Components/GameContainer.js","AppPages/FarmMode/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nconst getMonkeyName = (code) => {\r\n    const nameDict = {\r\n        \"1\": \"Cave Monkey\",\r\n        \"2\": \"Gatherer\",\r\n        \"3\": \"Hunter\",\r\n        \"4\": \"Firebender\",\r\n        \"5\": \"Farmer\",\r\n        \"6\": \"Guardian\",\r\n        \"7\": \"King\",\r\n        \"8\": \"Intern\",\r\n        \"9\": \"Crypto Investor\",\r\n        \"10\": \"Meta Monkey\",\r\n        \"11\": \"Cyborg\"\r\n    };\r\n    return nameDict[code];\r\n}\r\n\r\nconst getMonkeyRarity = (code) => {\r\n    const rarityDict = {\r\n        \"1\": \"Common\",\r\n        \"2\": \"Common\",\r\n        \"3\": \"Common\",\r\n        \"4\": \"Common\",\r\n        \"5\": \"Rare\",\r\n        \"6\": \"Rare\",\r\n        \"7\": \"Rare\",\r\n        \"8\": \"Epic\",\r\n        \"9\": \"Epic\",\r\n        \"10\": \"Legendary\",\r\n        \"11\": \"Legendary\"\r\n    };\r\n\r\n    const rarityColorDict = {\r\n        \"Common\": \"grey\",\r\n        \"Rare\": \"gold\",\r\n        \"Epic\": \"purple\",\r\n        \"Legendary\": \"red\"\r\n    };\r\n\r\n    const rarity = rarityDict[code];\r\n    const rarityColor = rarityColorDict[rarity];\r\n\r\n    return (\r\n        <span className=\"position-absolute top-50 translate-middle badge rounded-pill\" style={{\"fontSize\": \"1rem\", background: rarityColor, color: \"black\"}}>\r\n                {rarity}\r\n                <span className=\"visually-hidden\">rarity level</span>\r\n        </span>\r\n    );\r\n}\r\n\r\nconst NFTCard = (props) => {\r\n\r\n    const [counter, setCounter] = useState(0);\r\n    const [timeWork, setTimeWork] = useState(0);\r\n    const [missingTime, setMissingTime] = useState(0);\r\n    const [canWork, setCanWork] = useState(true);\r\n\r\n    const { monkeyType, monkeyLevel, tokenId, playGame } = props;\r\n\r\n    const monkeyName = getMonkeyName(monkeyType);\r\n\r\n    const monkeyRarity = getMonkeyRarity(monkeyType);\r\n\r\n    const goWork = () => {\r\n        if (canWork) {\r\n            playGame();\r\n            setCanWork(false);\r\n            let now = new Date()\r\n            let nowSeconds = parseInt(now.getTime() / 1000)\r\n            setTimeWork(nowSeconds + 28800);\r\n        }\r\n    }\r\n\r\n    const fetchTimeToWork = async () => {\r\n     //implement for real game version   \r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!canWork) {\r\n            let now = new Date()\r\n            let nowSeconds = now.getTime() / 1000\r\n            setMissingTime(parseInt(timeWork - nowSeconds));\r\n            setCounter(counter + 1);\r\n        }\r\n    }, [timeWork, canWork, missingTime, counter])\r\n\r\n    let workStatus;\r\n    if (canWork) {\r\n        workStatus = (\r\n            <>Ready to work</>\r\n        )\r\n    } else {\r\n        let hours = parseInt(missingTime / 3600);\r\n        let minutes = parseInt((missingTime % 3600) / 60);\r\n        let seconds = parseInt(missingTime % 60);\r\n\r\n        if (minutes < 10) {\r\n            minutes = \"0\" + minutes.toString();\r\n        }\r\n        if (seconds < 10) {\r\n            seconds = \"0\" + seconds.toString();\r\n        }\r\n\r\n        workStatus = (\r\n            <>Ready in {hours}:{minutes}:{seconds}</>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Col xs=\"12\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100%\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                  <CardBody>\r\n                    <Row className=\"text-center gx-0\">\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\"}}>\r\n                                #{tokenId}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\"}}>\r\n                                {monkeyName}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                {monkeyRarity}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                Level: {monkeyLevel}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                {workStatus}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                <Button disabled={!canWork} onClick={goWork} color=\"primary\">WORK!</Button>\r\n                            </Col>\r\n                            \r\n                    </Row>\r\n                  </CardBody>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default NFTCard;\r\n","import React from \"react\";\r\nimport {\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\n\r\nimport \"./Roulette.css\"\r\n\r\n// import caveMonkeyImg from \"../../../assets/monkeys/CaveMonkey.png\";\r\n// import gathererImg from \"../../../assets/monkeys/Gatherer.png\";\r\n// import hunterImg from \"../../../assets/monkeys/Hunter.png\";\r\n// import fireBenderImg from \"../../../assets/monkeys/FireBender.png\";\r\n// import farmerImg from \"../../../assets/monkeys/Farmer.png\";\r\n// import guardianImg from \"../../../assets/monkeys/Guardian.png\";\r\n// import kingImg from \"../../../assets/monkeys/King.png\";\r\n// import internImg from \"../../../assets/monkeys/Intern.png\";\r\n// import cryptoInvestorImg from \"../../../assets/monkeys/CryptoInvestor.png\";\r\n// import metaMonkeyImg from \"../../../assets/monkeys/MetaMonkey.png\";\r\n// import cyborgImg from \"../../../assets/monkeys/Cyborg.png\";\r\n\r\n// const getMonkeyImage = (code) => {\r\n//     const imgDict = {\r\n//         \"1\": caveMonkeyImg,\r\n//         \"2\": gathererImg,\r\n//         \"3\": hunterImg,\r\n//         \"4\": fireBenderImg,\r\n//         \"5\": farmerImg,\r\n//         \"6\": guardianImg,\r\n//         \"7\": kingImg,\r\n//         \"8\": internImg,\r\n//         \"9\": cryptoInvestorImg,\r\n//         \"10\": metaMonkeyImg,\r\n//         \"11\": cyborgImg\r\n//     };\r\n//     return imgDict[code];\r\n// }\r\n\r\nimport Cave from \"../../../assets/establishments/Cave.jpg\";\r\nimport Forest from \"../../../assets/establishments/Forest.jpg\";\r\nimport Farm from \"../../../assets/establishments/Farm.jpg\";\r\nimport Castle from \"../../../assets/establishments/Castle.jpg\";\r\nimport Office1 from \"../../../assets/establishments/Office1.jpg\";\r\nimport Office2 from \"../../../assets/establishments/Office2.jpg\";\r\nimport Space from \"../../../assets/establishments/Space.jpg\";\r\nimport Mars from \"../../../assets/establishments/Mars.jpg\";\r\nimport TimeMachine from \"../../../assets/establishments/timeMachine.jpg\";\r\n\r\nconst getEstablishments = (monkeyType) => {\r\n    let establishmentsMap = {\r\n        \"1\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"2\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"3\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"4\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"5\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"6\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"7\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"8\": [\"office-transition\", Office1, Office2, TimeMachine],\r\n        \"9\": [\"office-transition\", Office1, Office2, TimeMachine],\r\n        \"10\": [\"space-transition\", Space, Mars, TimeMachine],\r\n        \"11\": [\"space-transition\", Space, Mars, TimeMachine]\r\n    };\r\n    return establishmentsMap[monkeyType];\r\n}\r\n\r\nconst Roulette = (props) => {\r\n\r\n    const { monkeyType, animationDuration, shouldAnimate, result } = props;\r\n\r\n    let establishments = getEstablishments(monkeyType);\r\n\r\n    let animationName = shouldAnimate ? establishments[0] : \"noAnimation\";\r\n\r\n    return (\r\n        <Col xs=\"8\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100%\"}}>\r\n            <Card className=\"mb-1 mt-2 border border-3\" style={\r\n                {animationName: animationName, animationDuration: animationDuration, \r\n                animationIterationCount: \"infinite\",\r\n                backgroundImage: `url(${establishments[result]})`,\r\n                backgroundPosition: \"center\",\r\n                backgroundSize: \"cover\", color: \"white\", borderColor: \"rgb(200,200,200, 0.5)\", width: \"50%\"}}\r\n            >\r\n                <CardBody>\r\n                    <div style={{ height: \"270px\"}}>\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Roulette;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass GameModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    let modalText;\r\n    if (this.props.won) {\r\n      modalText = (\r\n        <>\r\n          Congratulations, you just won {this.props.wonValue} $BNANA! <br/>\r\n          Remember this is a beta version, your balance will appear in \r\n          your account only as long as your session lasts. <br/>\r\n          Get ready for the real game launch!\r\n        </>\r\n      );\r\n    } else {\r\n      modalText = (\r\n        <>\r\n          Unfortunatelly your monkey is not ready to farm at this station :( <br/>\r\n          Upgrade him to level 2 so that you can earn $BNANA even if you land at this spot. <br/>\r\n          Remember this is a beta version, your balance will appear in \r\n          your account only as long as your session lasts. <br/>\r\n          Get ready for the real game launch!\r\n        </>\r\n      )\r\n    } \r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            {modalText}\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameModal;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass InstructionsModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            Use the time machine to bring your monkey to the closest workstation. <br/>\r\n            Each NFT monkey in your collection is able to work 3 times a day, \r\n            with an eight hour interval (complying with union regulations). <br/>\r\n            The time machine brings your monkey to a random location, there's a 20% chance that the time machine will bring your monkey to a level 2 workstation.\r\n            If that happens, you'll get 6 times the rewards. But beware, only level 2 monkeys are able to perform these task,\r\n            if your monkey is level 1 and lands at a level 2 workstation, you'll get no rewards...\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InstructionsModal;","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport \"./Roulette.css\"\r\n\r\nimport ModalHeaderBg from \"../../../assets/roulette/header_bg/fire.png\";\r\n\r\nimport ButtonPlaces from \"../../../assets/roulette/level_places/button_place_level.png\";\r\nimport Level1Places from \"../../../assets/roulette/level_places/level_1.png\";\r\nimport Level2Places from \"../../../assets/roulette/level_places/level_2.png\";\r\n\r\n\r\nimport CaveName from \"../../../assets/roulette/place_names/cave.png\";\r\n\r\nimport SampleMonkey from \"../../../assets/roulette/monkeys/King.png\"\r\n\r\nimport Cave from \"../../../assets/establishments/Cave.jpg\";\r\nimport Forest from \"../../../assets/establishments/Forest.jpg\";\r\nimport Farm from \"../../../assets/establishments/Farm.jpg\";\r\nimport Castle from \"../../../assets/establishments/Castle.jpg\";\r\nimport Office1 from \"../../../assets/establishments/Office1.jpg\";\r\nimport Office2 from \"../../../assets/establishments/Office2.jpg\";\r\nimport Space from \"../../../assets/establishments/Space.jpg\";\r\nimport Mars from \"../../../assets/establishments/Mars.jpg\";\r\nimport TimeMachine from \"../../../assets/establishments/timeMachine.jpg\";\r\n\r\nconst getEstablishments = (monkeyType) => {\r\n    let establishmentsMap = {\r\n        \"1\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"2\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"3\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"4\": [\"cave-transition\", Cave, Forest, TimeMachine],\r\n        \"5\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"6\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"7\": [\"farm-transition\", Farm, Castle, TimeMachine],\r\n        \"8\": [\"office-transition\", Office1, Office2, TimeMachine],\r\n        \"9\": [\"office-transition\", Office1, Office2, TimeMachine],\r\n        \"10\": [\"space-transition\", Space, Mars, TimeMachine],\r\n        \"11\": [\"space-transition\", Space, Mars, TimeMachine]\r\n    };\r\n    return establishmentsMap[monkeyType];\r\n}\r\n\r\nconst RouletteModal = (props) => {\r\n\r\n    const { isOpen, closeModal } = props;\r\n\r\n    // let establishments = getEstablishments(monkeyType);\r\n\r\n    // let animationName = shouldAnimate ? establishments[0] : \"noAnimation\";\r\n\r\n    const toggle = () => {\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n    <Modal isOpen={isOpen} toggle={toggle} backdrop={true} className=\"modal-lg modal-dialog-centered\"\r\n    style={{width: \"60vw\", height: \"80vh\"}}\r\n    >\r\n\r\n    <ModalBody className=\"gx-0 p-0\">\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    className=\"d-flex justify-content-evenly align-items-end\"\r\n                    style={{\r\n                        backgroundImage: `url(${ModalHeaderBg})`,\r\n                        backgroundPosition: \"center\",\r\n                        backgroundSize: \"cover\",\r\n                        color: \"white\", borderColor: \"#561473\",\r\n                        height: \"150px\"\r\n                    }}\r\n                >\r\n                    <img style={{height: \"200px\"}} src={SampleMonkey} alt={\"\"}/>\r\n            \r\n                </div>\r\n\r\n                <div\r\n                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center rounded\"\r\n                style={{\r\n                    background: `url(${ButtonPlaces})`,\r\n                    backgroundPosition: \"center\",\r\n                    backgroundSize: \"cover\",\r\n                    width: \"15%\",\r\n                    height: \"10%\"\r\n                }}\r\n                >\r\n                    <img style={{width: \"80%\"}} src={Level1Places} alt={\"\"}/>\r\n                    <span class=\"visually-hidden\">img</span>\r\n                </div>\r\n                \r\n            </Col>\r\n        </Row>\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\"\r\n                    }}\r\n                >\r\n                    <img style={{width: \"15%\"}} src={Level1Places} alt={\"\"}/>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                \r\n                <div style={{\r\n                    color: \"white\",\r\n                    background: \"linear-gradient(350deg, rgba(153,102,0,1) 34%, rgba(153,0,153,1) 65%)\"\r\n                    }}>\r\n                \r\n                    \r\n                    <div className=\"d-flex justify-content-evenly align-items-center\">\r\n                        \r\n                    <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className=\"mb-1 mt-3\" style={{\r\n                                width: \"80%\", background: \"#240940\", color: \"white\",\r\n                                border: \"5px solid #240940\"}}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level1Places} alt={\"\"}/>\r\n                                    <span class=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top width=\"80%\" src={Cave} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={CaveName} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className=\"mb-1 mt-3\" style={{\r\n                                width: \"80%\", background: \"#240940\", color: \"white\",\r\n                                border: \"5px solid #240940\"}}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level2Places} alt={\"\"}/>\r\n                                    <span class=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top width=\"80%\" src={Cave} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={CaveName} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                                \r\n                    </div>\r\n                    \r\n                    <button style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\", \r\n                        border: \"0\"\r\n                    }} className=\"rounded mt-3 mb-3\">WORK</button>\r\n\r\n                </div>\r\n\r\n            </Col>\r\n        </Row>\r\n    </ModalBody>\r\n\r\n    </Modal>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default RouletteModal;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Spinner\r\n} from \"reactstrap\";\r\n\r\nimport NFTCard from \"./NftCard\";\r\nimport Roulette from \"./Roulette\";\r\nimport GameModal from \"./GameModal\";\r\nimport InstructionsModal from \"./InstructionsModal\";\r\nimport RouletteModal from \"./RouletteModal\";\r\n\r\nimport { updateBetaBalance } from \"../../../ethereum/web3\";\r\n\r\nimport metaMaskLogo from \"../../../assets/metaMask/MetaMask.png\";\r\n\r\nconst GameContainer = (props) => {\r\n\r\n    const [NFTList, setNFTList] = useState(\"load\");\r\n    const [rouletteVars, setRouletteVars] = useState({\r\n      tokenId: \"none\",\r\n      monkeyType: \"1\",\r\n      animationDuration: \"0s\",\r\n      shouldAnimate: false,\r\n      result: 3\r\n    });\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [won, setWon] = useState(false);\r\n    const [wonValue, setWonValue] = useState(0);\r\n\r\n    const [openInstructionsModal, setOpenInstructionsModal] = useState(true);\r\n\r\n    const fetchData = async () => {\r\n      if (window.isUserWallet !== true) {\r\n        setNFTList(\"load\");\r\n        return \"\";\r\n      }\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      const userBalance = await window.nftContract.methods.balanceOf(walletHash[0]).call();\r\n      let dataList = [];\r\n\r\n      for (let i of Array(parseInt(userBalance)).keys()) {\r\n        let nftIndex = await window.nftContract.methods.tokenOfOwnerByIndex(walletHash[0], i).call();\r\n        let nftData = await window.nftContract.methods.getNftData(nftIndex).call();\r\n        dataList.push({nftIndex, nftData});\r\n      }\r\n      setNFTList(dataList);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (NFTList === \"load\") {\r\n        fetchData();\r\n      }\r\n    });\r\n\r\n    const playGame = async (tokenData) => {\r\n      window.scrollTo(0, 0);\r\n      setRouletteVars({\r\n        tokenId: tokenData.nftIndex,\r\n        monkeyType: tokenData.nftData[0],\r\n        animationDuration: \"3s\",\r\n        shouldAnimate: true,\r\n        result: 1\r\n      });\r\n\r\n      //substitute for blockchain call later\r\n      let seed = Math.random();\r\n      let result = seed > 0.8 ? 2 : 1;\r\n      let baseFarm = 1;\r\n      \r\n      console.log(props.bnanaBalance);\r\n\r\n      if (tokenData.nftData[1] === \"2\") {\r\n        setWon(true);\r\n        let wonAmmount = result === 2 ? 2 * baseFarm : baseFarm;\r\n        setWonValue(wonAmmount);\r\n        updateBetaBalance(wonAmmount);\r\n\r\n      } else {\r\n        if (result === 2) {\r\n          setWon(false)\r\n        } else {\r\n          setWon(true);\r\n          setWonValue(baseFarm);\r\n          updateBetaBalance(baseFarm)\r\n        }\r\n      }\r\n      \r\n      setTimeout(() => {\r\n        setRouletteVars({\r\n          tokenId: tokenData.nftIndex,\r\n          monkeyType: tokenData.nftData[0],\r\n          animationDuration: \"5s\",\r\n          shouldAnimate: true,\r\n          result: 1\r\n        });\r\n      }, 5000);\r\n      setTimeout(() => {\r\n        setRouletteVars({\r\n          tokenId: tokenData.nftIndex,\r\n          monkeyType: tokenData.nftData[0],\r\n          animationDuration: \"3s\",\r\n          shouldAnimate: false,\r\n          result: result\r\n        });\r\n        setOpenModal(true);\r\n      }, 7500);\r\n\r\n    };\r\n\r\n    let NFTCards;\r\n    if (window.isUserWallet !== true) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <img src={metaMaskLogo} alt={\"\"} className='me-3' style={{width: \"50px\", height: \"auto\"}}/>\r\n                  Connect your wallet to see your NFT collection\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList === \"load\") {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <Spinner type=\"grow\" color=\"warning\" /> \r\n                </CardTitle>\r\n                <CardSubtitle style={{color: \"white\"}}>Loading your collection, please wait</CardSubtitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList.length === 0) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  It looks like you don't own any CryptoMonkeys NFT's yet... It's time to buy some in the portals section!\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else {\r\n      NFTCards = [];\r\n      for (const NFT of NFTList) {\r\n        // if (!NFT.nftData[3]) {\r\n        //   continue;\r\n        // }\r\n        let serialNumber = (parseInt(NFT.nftIndex) + 7834).toString();\r\n        NFTCards.push(\r\n          <NFTCard key={NFT.nftIndex} monkeyType={NFT.nftData[0]} monkeyLevel={NFT.nftData[1]} tokenId={serialNumber} playGame={() => playGame(NFT)}/>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <TransitionGroup style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n          <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\r\n            timeout={1500} enter={false} exit={false}>\r\n            <Row className=\"text-center gx-0\" style={{width: \"90%\"}}>\r\n              <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>Time to farm $BNANA</CardTitle>\r\n                    <div className=\"divider\" />\r\n                    <Row className=\"text-center mt-3 gx-0\">\r\n                        <Roulette monkeyType={rouletteVars.monkeyType} animationDuration={rouletteVars.animationDuration} shouldAnimate={rouletteVars.shouldAnimate} result={rouletteVars.result}/>\r\n                    </Row>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              {NFTCards}\r\n            </Row>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n        <GameModal closeModal={() => setOpenModal(false)} open={openModal} won={won} wonValue={wonValue}/>\r\n        {/* <InstructionsModal closeModal={() => setOpenInstructionsModal(false)} open={openInstructionsModal}/> */}\r\n        <RouletteModal closeModal={() => setOpenInstructionsModal(false)} isOpen={true}/>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default GameContainer;\r\n","import React, { useState } from \"react\";\r\n\r\n// Layout\r\nimport AppHeader from \"../../Layout/AppHeader\";\r\nimport AppSidebar from \"../../Layout/AppSidebar\";\r\n\r\n// Internal components\r\nimport GameContainer from \"./Components/GameContainer\";\r\n\r\nfunction useForceUpdate(){\r\n  const [value, setValue] = useState(0); // integer state\r\n  return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nconst FarmMode = ({ match }) => {\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  return (\r\n    <>\r\n\r\n      <AppHeader forceUpdate={() => forceUpdate()}/>\r\n      <div className=\"app-main\">\r\n        <AppSidebar />\r\n        <div className=\"app-main__outer\">\r\n          <div className=\"app-main__inner p-0\">\r\n            <GameContainer/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default FarmMode;\r\n"],"names":["props","workStatus","useState","counter","setCounter","timeWork","setTimeWork","missingTime","setMissingTime","canWork","setCanWork","monkeyType","monkeyLevel","tokenId","playGame","monkeyName","monkeyRarity","code","rarity","rarityColor","className","style","background","color","getMonkeyRarity","useEffect","nowSeconds","Date","getTime","parseInt","hours","minutes","seconds","toString","xs","display","justifyContent","alignItems","width","disabled","onClick","now","animationDuration","shouldAnimate","result","establishments","Cave","Forest","TimeMachine","Farm","Castle","Office1","Office2","Space","Mars","getEstablishments","animationName","animationIterationCount","backgroundImage","backgroundPosition","backgroundSize","borderColor","height","GameModal","state","backdrop","toggle","bind","this","closeModal","modalText","won","wonValue","isOpen","open","disabledButtonUpgrade","React","ModalHeaderBg","src","SampleMonkey","alt","ButtonPlaces","Level1Places","class","border","top","CaveName","Level2Places","NFTList","setNFTList","rouletteVars","setRouletteVars","openModal","setOpenModal","setWon","setWonValue","setOpenInstructionsModal","fetchData","window","isUserWallet","web3Instance","eth","getAccounts","walletHash","nftContract","methods","balanceOf","call","userBalance","dataList","Array","keys","i","tokenOfOwnerByIndex","nftIndex","getNftData","nftData","push","NFTCards","tokenData","scrollTo","seed","Math","random","console","log","bnanaBalance","wonAmmount","updateBetaBalance","setTimeout","md","metaMaskLogo","type","length","NFT","serialNumber","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","match","forceUpdate","setValue","value","useForceUpdate","AppHeader","AppSidebar"],"sourceRoot":""}