{"version":3,"file":"static/js/135.0eccf4e1.chunk.js","mappings":"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","sources":["AppPages/FarmMode/Components/NftCard.js","AppPages/FarmMode/Components/GameModal.js","AppPages/FarmMode/Components/InstructionsModal.js","AppPages/FarmMode/Components/RouletteModal.js","AppPages/FarmMode/Components/GameContainer.js","AppPages/FarmMode/index.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nconst getMonkeyName = (code) => {\r\n    const nameDict = {\r\n        \"1\": \"Cave Monkey\",\r\n        \"2\": \"Gatherer\",\r\n        \"3\": \"Hunter\",\r\n        \"4\": \"Firebender\",\r\n        \"5\": \"Farmer\",\r\n        \"6\": \"Guardian\",\r\n        \"7\": \"King\",\r\n        \"8\": \"Intern\",\r\n        \"9\": \"Crypto Investor\",\r\n        \"10\": \"Meta Monkey\",\r\n        \"11\": \"Cyborg\"\r\n    };\r\n    return nameDict[code];\r\n}\r\n\r\nconst getMonkeyRarity = (code) => {\r\n    const rarityDict = {\r\n        \"1\": \"Common\",\r\n        \"2\": \"Common\",\r\n        \"3\": \"Common\",\r\n        \"4\": \"Common\",\r\n        \"5\": \"Rare\",\r\n        \"6\": \"Rare\",\r\n        \"7\": \"Rare\",\r\n        \"8\": \"Epic\",\r\n        \"9\": \"Epic\",\r\n        \"10\": \"Legendary\",\r\n        \"11\": \"Legendary\"\r\n    };\r\n\r\n    const rarityColorDict = {\r\n        \"Common\": \"grey\",\r\n        \"Rare\": \"gold\",\r\n        \"Epic\": \"purple\",\r\n        \"Legendary\": \"red\"\r\n    };\r\n\r\n    const rarity = rarityDict[code];\r\n    const rarityColor = rarityColorDict[rarity];\r\n\r\n    return (\r\n        <span className=\"position-absolute top-50 translate-middle badge rounded-pill\" style={{\"fontSize\": \"1rem\", background: rarityColor, color: \"black\"}}>\r\n                {rarity}\r\n                <span className=\"visually-hidden\">rarity level</span>\r\n        </span>\r\n    );\r\n}\r\n\r\nconst NFTCard = (props) => {\r\n\r\n    const [isCounterSet, setIsCounterSet] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [timeWork, setTimeWork] = useState(0);\r\n    const [canWork, setCanWork] = useState(true);\r\n    const [timeInterval, setTimeInterval] = useState(0)\r\n    const [availableBalance, setAvailableBalance] = useState(\"0\");\r\n    const [initialTime, setInitialTime] = useState(0);\r\n\r\n    const { monkeyType, monkeyLevel, tokenId, nft_id } = props;\r\n\r\n    const monkeyName = getMonkeyName(monkeyType);\r\n\r\n    const monkeyRarity = getMonkeyRarity(monkeyType);\r\n\r\n    const stakeNft = async () => {\r\n        const walletHash = await window.web3Instance.eth.getAccounts();\r\n        await window.gameContract.methods.baseMining(nft_id).send({from: walletHash[0]});\r\n        setCounter(counter + 1);\r\n    }\r\n\r\n    const withdrawalNft = async () => {\r\n        const walletHash = await window.web3Instance.eth.getAccounts();\r\n        await window.gameContract.methods.withdrawalUserBalance(nft_id).send({from: walletHash[0]});\r\n        setCanWork(true);\r\n    }\r\n\r\n    const updateBalance = async () => {\r\n        const balance = await window.gameContract.methods.getAvailableBalance(nft_id).call();\r\n        setAvailableBalance(balance);\r\n    }\r\n\r\n    // const getTime = async () => {\r\n    //     let baseSalary = await window.gameContract.methods.baseSalary(monkeyType).call();\r\n    //     let multiplier = await window.gameContract.methods.lvl2Multiplier().call()\r\n    //     let salary = monkeyLevel === \"2\" ? baseSalary * multiplier : baseSalary;\r\n    //     let timeInterval = await window.gameContract.methods.waitPeriod().call();\r\n    //     let ethereumNow = await window.gameContract.methods.getNow().call();\r\n    //     let nftNow = await window.gameContract.methods.lastMiningMapping(nft_id).call();\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if (!canWork) {\r\n            if (!isCounterSet) {\r\n                setIsCounterSet(true);\r\n                setInterval(() => {\r\n                    setCounter(counter + 1);\r\n                }, 1000);\r\n                updateBalance();\r\n            }\r\n        } else {\r\n            const fetchTimeToWork = async () => {\r\n                let lastMine = await window.gameContract.methods.getLastMiningMapping(nft_id).call();\r\n                let now = await window.gameContract.methods.getNow().call();\r\n                let timeIntervalVar = await window.gameContract.methods.waitPeriod().call();\r\n                let nextWork = parseInt(timeIntervalVar) - ( ( parseInt(now) - parseInt(lastMine) ) % parseInt(timeIntervalVar) );\r\n                let availableBalanceVar = await window.gameContract.methods.getAvailableBalance(nft_id).call();\r\n\r\n\r\n                let nowPc = new Date();\r\n                let nowSeconds = nowPc.getTime() / 1000;\r\n                if (parseInt(lastMine) !== \"0\") {\r\n                    setCanWork(false);\r\n                    setTimeWork(nextWork);\r\n                    setTimeInterval(timeIntervalVar);\r\n                    setAvailableBalance(availableBalanceVar);\r\n                    setInitialTime(nowSeconds);\r\n                } else {\r\n                    setCanWork(false);\r\n                    setAvailableBalance(\"0\");\r\n                }\r\n            }\r\n            fetchTimeToWork();\r\n        }\r\n    }, [timeWork, canWork, counter, isCounterSet, nft_id])\r\n\r\n    let workStatus;\r\n    let workButton;\r\n    if (canWork) {\r\n        workStatus = (\r\n            <>Ready to work</>\r\n        );\r\n        workButton = <Button onClick={stakeNft} color=\"primary\">WORK!</Button>\r\n    } else {\r\n        let now = new Date();\r\n        let nowSeconds = now.getTime() / 1000;\r\n        let elapsedTime = nowSeconds - initialTime;\r\n        let missingTime = parseInt(timeWork - elapsedTime);\r\n\r\n        let hours = parseInt(missingTime / 3600);\r\n        let minutes = parseInt((missingTime % 3600) / 60);\r\n        let seconds = parseInt(missingTime % 60);\r\n\r\n        if (minutes < 10) {\r\n            minutes = \"0\" + minutes.toString();\r\n        }\r\n        if (seconds < 10) {\r\n            seconds = \"0\" + seconds.toString();\r\n        }\r\n        workStatus = (\r\n            <>Next farm in {hours}:{minutes}:{seconds}</>\r\n        )\r\n        workButton = <Button onClick={withdrawalNft} color=\"primary\">COLLECT!</Button>\r\n    }\r\n\r\n    return (\r\n        <Col xs=\"12\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100%\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                  <CardBody>\r\n                    <Row className=\"text-center gx-0\">\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\", alignItems: \"center\"}}>\r\n                                #{tokenId}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\", alignItems: \"center\"}}>\r\n                                {monkeyName}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                                {monkeyRarity}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                                Level: {monkeyLevel}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                                Farmed: {availableBalance}\r\n                                <br/>\r\n                                {workStatus}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                                {workButton}\r\n                            </Col>\r\n                            \r\n                    </Row>\r\n                  </CardBody>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default NFTCard;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass GameModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    let modalText;\r\n    if (this.props.won) {\r\n      modalText = (\r\n        <>\r\n          Congratulations, you just won {this.props.wonValue} $BNANA! <br/>\r\n        </>\r\n      );\r\n    } else {\r\n      modalText = (\r\n        <>\r\n          Unfortunatelly your monkey is not ready to farm at this station :( <br/>\r\n          Upgrade him to level 2 so that you can earn $BNANA even if you land at this spot. <br/>\r\n        </>\r\n      )\r\n    } \r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            {modalText}\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameModal;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass InstructionsModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            Use the time machine to bring your monkey to the closest workstation. <br/>\r\n            Each NFT monkey in your collection is able to work 3 times a day, \r\n            with an eight hour interval (complying with union regulations). <br/>\r\n            The time machine brings your monkey to a random location, there's a 20% chance that the time machine will bring your monkey to a level 2 workstation.\r\n            If that happens, you'll get 6 times the rewards. But beware, only level 2 monkeys are able to perform these task,\r\n            if your monkey is level 1 and lands at a level 2 workstation, you'll get no rewards...\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InstructionsModal;","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport \"./Roulette.css\"\r\n\r\nimport ModalHeaderBg from \"../../../assets/roulette/header_bg/fire.png\";\r\nimport PossibleTargets from \"../../../assets/roulette/level_places/possible_targets.png\";\r\nimport Work from \"../../../assets/roulette/level_places/work.png\";\r\n\r\nimport ButtonPlaces from \"../../../assets/roulette/level_places/button_place_level.png\";\r\nimport Level1Places from \"../../../assets/roulette/level_places/level_1.png\";\r\nimport Level2Places from \"../../../assets/roulette/level_places/level_2.png\";\r\n\r\nimport Level1NFT from \"../../../assets/roulette/nft_level/lvl1.png\";\r\nimport Level2NFT from \"../../../assets/roulette/nft_level/lvl2.png\";\r\n\r\nimport CaveName from \"../../../assets/roulette/place_names/cave.png\";\r\nimport ForestName from \"../../../assets/roulette/place_names/forest.png\";\r\nimport FarmName from \"../../../assets/roulette/place_names/farm.png\";\r\nimport CastleName from \"../../../assets/roulette/place_names/castle.png\";\r\nimport Office1Name from \"../../../assets/roulette/place_names/office.png\";\r\nimport Office2Name from \"../../../assets/roulette/place_names/company.png\";\r\nimport SpaceName from \"../../../assets/roulette/place_names/spaceship.png\";\r\nimport MarsName from \"../../../assets/roulette/place_names/mars.png\";\r\n\r\nimport CaveHead from \"../../../assets/roulette/monkeys/CaveMonkey.png\"\r\nimport GathererHead from \"../../../assets/roulette/monkeys/Gatherer.png\"\r\nimport HunterHead from \"../../../assets/roulette/monkeys/Hunter.png\"\r\nimport FireBenderHead from \"../../../assets/roulette/monkeys/FireBender.png\"\r\nimport FarmerHead from \"../../../assets/roulette/monkeys/Farmer.png\"\r\nimport GuardianHead from \"../../../assets/roulette/monkeys/Guardian.png\"\r\nimport KingHead from \"../../../assets/roulette/monkeys/King.png\"\r\nimport InternHead from \"../../../assets/roulette/monkeys/Intern.png\"\r\nimport CryptoInvestorHead from \"../../../assets/roulette/monkeys/CryptoInvestor.png\"\r\nimport MetaMonkeyHead from \"../../../assets/roulette/monkeys/MetaMonkey.png\"\r\nimport CyborgHead from \"../../../assets/roulette/monkeys/Cyborg.png\"\r\n\r\nimport Cave from \"../../../assets/establishments/Cave.jpg\";\r\nimport Forest from \"../../../assets/establishments/Forest.jpg\";\r\nimport Farm from \"../../../assets/establishments/Farm.jpg\";\r\nimport Castle from \"../../../assets/establishments/Castle.jpg\";\r\nimport Office1 from \"../../../assets/establishments/Office1.jpg\";\r\nimport Office2 from \"../../../assets/establishments/Office2.jpg\";\r\nimport Space from \"../../../assets/establishments/Space.jpg\";\r\nimport Mars from \"../../../assets/establishments/Mars.jpg\";\r\n\r\nconst getEstablishments = (monkeyType) => {\r\n    let establishmentsMap = {\r\n        \"1\": [CaveHead, Cave, Forest, CaveName, ForestName],\r\n        \"2\": [GathererHead, Cave, Forest, CaveName, ForestName],\r\n        \"3\": [HunterHead, Cave, Forest, CaveName, ForestName],\r\n        \"4\": [FireBenderHead, Cave, Forest, CaveName, ForestName],\r\n        \"5\": [FarmerHead, Farm, Castle, FarmName, CastleName],\r\n        \"6\": [GuardianHead, Farm, Castle, FarmName, CastleName],\r\n        \"7\": [KingHead, Farm, Castle, FarmName, CastleName],\r\n        \"8\": [InternHead, Office1, Office2, Office1Name, Office2Name],\r\n        \"9\": [CryptoInvestorHead, Office1, Office2, Office1Name, Office2Name],\r\n        \"10\": [MetaMonkeyHead, Space, Mars, SpaceName, MarsName],\r\n        \"11\": [CyborgHead, Space, Mars, SpaceName, MarsName],\r\n    };\r\n    return establishmentsMap[monkeyType];\r\n}\r\n\r\nconst RouletteModal = (props) => {\r\n\r\n    const { isOpen, closeModal, monkeyType, levelNft, gameStatus, playGame } = props;\r\n\r\n    let establishments = getEstablishments(monkeyType);\r\n\r\n    // let animationName = shouldAnimate ? establishments[0] : \"noAnimation\";\r\n\r\n    let NFTLevelText = levelNft === \"1\" ? Level1NFT : Level2NFT;\r\n\r\n    let level1Animation;\r\n    let level2Animation;\r\n    let workButtonInactive;\r\n\r\n    if (gameStatus === \"preGame\") {\r\n        level1Animation = \"not-won\";\r\n        level2Animation = \"not-won\";\r\n        workButtonInactive = false;\r\n    } else if (gameStatus === \"playing\") {\r\n        level1Animation = \"lvl1_transition\";\r\n        level2Animation = \"lvl2_transition\";\r\n        workButtonInactive = true;\r\n    } else if (gameStatus === \"game1won\") {\r\n        level1Animation = \"game-won\";\r\n        level2Animation = \"not-won\";\r\n        workButtonInactive = true;\r\n    } else if (gameStatus === \"game2won\") {\r\n        level1Animation = \"not-won\";\r\n        level2Animation = \"game-won\";\r\n        workButtonInactive = true;\r\n    }\r\n\r\n    const toggle = () => {\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n    <Modal isOpen={isOpen} toggle={toggle} backdrop={true} className=\"modal-lg modal-dialog-centered\"\r\n    style={{width: \"60vw\", height: \"80vh\", backgroundColor: \"rgba(0, 0, 0, 0)\"}}\r\n    >\r\n\r\n    <ModalBody className=\"gx-0 p-0\">\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    className=\"d-flex justify-content-evenly align-items-end\"\r\n                    style={{\r\n                        backgroundImage: `url(${ModalHeaderBg})`,\r\n                        backgroundPosition: \"center\",\r\n                        backgroundSize: \"cover\",\r\n                        color: \"white\", borderColor: \"#561473\",\r\n                        height: \"90px\"\r\n                    }}\r\n                >\r\n                    <img style={{height: \"200px\"}} src={establishments[0]} alt={\"\"}/>\r\n            \r\n                </div>\r\n\r\n                <div\r\n                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center rounded\"\r\n                style={{\r\n                    background: `url(${ButtonPlaces})`,\r\n                    backgroundPosition: \"center\",\r\n                    backgroundSize: \"cover\",\r\n                    width: \"15%\",\r\n                    height: \"10%\"\r\n                }}\r\n                >\r\n                    <img style={{width: \"60%\"}} src={NFTLevelText} alt={\"\"}/>\r\n                    <span className=\"visually-hidden\">img</span>\r\n                </div>\r\n                \r\n            </Col>\r\n        </Row>\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\"\r\n                    }}\r\n                >\r\n                    <img className=\"mt-3 mb-3\" style={{width: \"30%\"}} src={PossibleTargets} alt={\"\"}/>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row className=\"text-center gx-0\">\r\n            <Col xs=\"12\">\r\n                \r\n                <div style={{\r\n                    color: \"white\",\r\n                    background: \"linear-gradient(350deg, rgba(153,102,0,1) 34%, rgba(153,0,153,1) 65%)\"\r\n                    }}>\r\n                \r\n                    \r\n                    <div className=\"d-flex justify-content-evenly align-items-center\">\r\n                        \r\n                    <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className={`mb-1 mt-3 p-2 box-shadow-est`} style={{\r\n                                width: \"80%\", color: \"white\",\r\n                                animation: `${level1Animation} infinite 3s linear`\r\n                                }}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level1Places} alt={\"\"}/>\r\n                                    <span className=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top src={establishments[1]} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={establishments[3]} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className={`mb-1 mt-3 p-2 box-shadow-est ${level2Animation}`} style={{\r\n                                width: \"80%\", color: \"white\",\r\n                                animation: `${level2Animation} infinite 3s linear`\r\n                                }}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level2Places} alt={\"\"}/>\r\n                                    <span className=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top src={establishments[2]} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={establishments[4]} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                                \r\n                    </div>\r\n                    \r\n                    <button style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\", \r\n                        border: \"0\",\r\n                        color: \"white\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"1.5rem\",\r\n                        width: \"200px\"\r\n                    }} className=\"rounded mt-3 mb-3\" \r\n                    disabled={workButtonInactive}\r\n                    onClick={playGame}>WORK</button>\r\n\r\n                </div>\r\n\r\n            </Col>\r\n        </Row>\r\n    </ModalBody>\r\n\r\n    </Modal>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default RouletteModal;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Spinner\r\n} from \"reactstrap\";\r\n\r\nimport NFTCard from \"./NftCard\";\r\nimport Roulette from \"./Roulette\";\r\nimport GameModal from \"./GameModal\";\r\nimport InstructionsModal from \"./InstructionsModal\";\r\nimport RouletteModal from \"./RouletteModal\";\r\n\r\nimport { updateBetaBalance } from \"../../../ethereum/web3\";\r\n\r\nimport metaMaskLogo from \"../../../assets/metaMask/MetaMask.png\";\r\n\r\nconst getBaseFarm = (monkeyType) => {\r\n    let farmMap = {\r\n      \"1\": 4.55,\r\n      \"2\": 5.05,\r\n      \"3\": 5.25,\r\n      \"4\": 5.55,\r\n      \"5\": 7.25,\r\n      \"6\": 8.30,\r\n      \"7\": 9.25,\r\n      \"8\": 11.10,\r\n      \"9\": 15.30,\r\n      \"10\": 19.75,\r\n      \"11\": 23.95\r\n    };\r\n    return farmMap[monkeyType];\r\n};\r\n\r\nconst GameContainer = (props) => {\r\n\r\n    const [NFTList, setNFTList] = useState(\"load\");\r\n    const [rouletteVars, setRouletteVars] = useState({\r\n      tokenId: \"none\",\r\n      monkeyType: \"1\",\r\n      animationDuration: \"0s\",\r\n      shouldAnimate: false,\r\n      result: 3\r\n    });\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [won, setWon] = useState(false);\r\n    const [wonValue, setWonValue] = useState(0);\r\n\r\n    const [openRouletteModal, setOpenRouletteModal] = useState(false);\r\n    const [rouletteMonkeyType, setRouletteMonkeyType] = useState(\"1\");\r\n    const [rouletteMonkeyLevel, setRouletteMonkeyLevel] = useState(\"1\");\r\n    const [rouletteTokenData, setRouletteTokenData] = useState({});\r\n    const [gameStatus, setGameStatus] = useState(\"preGame\");\r\n    const [timer, setTimer] = useState(\"\");\r\n\r\n    const fetchData = async () => {\r\n      if (window.isUserWallet !== true) {\r\n        setNFTList(\"load\");\r\n        return \"\";\r\n      }\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      const userBalance = await window.nftContract.methods.balanceOf(walletHash[0]).call();\r\n      let dataList = [];\r\n\r\n      for (let i of Array(parseInt(userBalance)).keys()) {\r\n        let nftIndex = await window.nftContract.methods.tokenOfOwnerByIndex(walletHash[0], i).call();\r\n        let nftData = await window.nftContract.methods.getNftData(nftIndex).call();\r\n        dataList.push({nftIndex, nftData});\r\n      }\r\n      setNFTList(dataList);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (NFTList === \"load\") {\r\n        fetchData();\r\n      }\r\n    });\r\n\r\n    const playGame = async () => {\r\n      let token_id = rouletteTokenData.nftIndex;\r\n      const tokenData = rouletteTokenData;\r\n      setGameStatus(\"playing\");\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      await window.gameContract.methods.baseMining(token_id).send({from: walletHash[0]});\r\n      const gameResult = await window.gameContract.methods.getLastResult(token_id).call();\r\n\r\n      //substitute for blockchain call later\r\n      let baseFarm = getBaseFarm(rouletteTokenData.nftData[0]);\r\n\r\n      if (tokenData.nftData[1] === \"2\") {\r\n        setWon(true);\r\n        let wonAmmount = gameResult === 2 ? 6 * baseFarm : baseFarm;\r\n        setWonValue(wonAmmount);\r\n        updateBetaBalance(wonAmmount);\r\n\r\n      } else {\r\n        if (gameResult === \"2\") {\r\n          setWon(false)\r\n        } else {\r\n          setWon(true);\r\n          setWonValue(baseFarm);\r\n          updateBetaBalance(baseFarm)\r\n        }\r\n      }\r\n      \r\n      setTimeout(() => {\r\n\r\n        if (gameResult === \"1\") {\r\n          setGameStatus(\"game1won\");\r\n        } else if (gameResult === \"2\") {\r\n          setGameStatus(\"game2won\");\r\n        }\r\n      \r\n\r\n        setTimeout(() => {\r\n          setOpenModal(true);\r\n        }, 1000);\r\n\r\n      }, 5000);\r\n      \r\n    };\r\n\r\n    const openGame = (NFT) => {\r\n      console.log(NFT);\r\n      setOpenRouletteModal(true);\r\n      setRouletteTokenData(NFT);\r\n      setRouletteMonkeyType(NFT.nftData[0]);\r\n      setRouletteMonkeyLevel(NFT.nftData[1]);\r\n      setGameStatus(\"preGame\");\r\n    }\r\n\r\n    let NFTCards;\r\n    if (window.isUserWallet !== true) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <img src={metaMaskLogo} alt={\"\"} className='me-3' style={{width: \"50px\", height: \"auto\"}}/>\r\n                  Connect your wallet to see your NFT collection\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList === \"load\") {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <Spinner type=\"grow\" color=\"warning\" /> \r\n                </CardTitle>\r\n                <CardSubtitle style={{color: \"white\"}}>Loading your collection, please wait</CardSubtitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList.length === 0) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  It looks like you don't own any CryptoMonkeys NFT's yet... It's time to buy some in the portals section!\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else {\r\n      NFTCards = [];\r\n      for (const NFT of NFTList) {\r\n        if (!NFT.nftData[3]) {\r\n          continue;\r\n        }\r\n        let serialNumber = (parseInt(NFT.nftIndex) + 7834).toString();\r\n        NFTCards.push(\r\n          <NFTCard key={NFT.nftIndex} nft_id={NFT.nftIndex} monkeyType={NFT.nftData[0]} monkeyLevel={NFT.nftData[1]} tokenId={serialNumber} />\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <TransitionGroup style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n          <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\r\n            timeout={1500} enter={false} exit={false}>\r\n            <Row className=\"text-center gx-0\" style={{width: \"90%\"}}>\r\n              <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>\r\n                      Time to farm $BNANA <br/>\r\n                      Select your NFTs and farm with them!\r\n                    </CardTitle>\r\n                    <div className=\"divider\" />\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              {NFTCards}\r\n            </Row>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n        <GameModal closeModal={() => setOpenModal(false)} open={openModal} won={won} wonValue={wonValue}/>\r\n        {/* <InstructionsModal closeModal={() => setOpenInstructionsModal(false)} open={openInstructionsModal}/> */}\r\n        <RouletteModal closeModal={() => setOpenRouletteModal(false)} isOpen={openRouletteModal} monkeyType={rouletteMonkeyType} levelNft={rouletteMonkeyLevel} gameStatus={gameStatus} playGame={playGame}/>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default GameContainer;\r\n","import React, { useState } from \"react\";\r\n\r\n// Layout\r\nimport AppHeader from \"../../Layout/AppHeader\";\r\nimport AppSidebar from \"../../Layout/AppSidebar\";\r\n\r\n// Internal components\r\nimport GameContainer from \"./Components/GameContainer\";\r\n\r\nfunction useForceUpdate(){\r\n  const [value, setValue] = useState(0); // integer state\r\n  return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nconst FarmMode = ({ match }) => {\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  return (\r\n    <>\r\n\r\n      <AppHeader forceUpdate={() => forceUpdate()}/>\r\n      <div className=\"app-main\">\r\n        <AppSidebar />\r\n        <div className=\"app-main__outer\">\r\n          <div className=\"app-main__inner p-0\">\r\n            <GameContainer/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default FarmMode;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","workStatus","workButton","useState","isCounterSet","setIsCounterSet","counter","setCounter","timeWork","setTimeWork","canWork","setCanWork","setTimeInterval","availableBalance","setAvailableBalance","initialTime","setInitialTime","monkeyType","monkeyLevel","tokenId","nft_id","monkeyName","monkeyRarity","code","rarity","rarityColor","className","style","background","color","getMonkeyRarity","stakeNft","window","web3Instance","eth","getAccounts","walletHash","gameContract","methods","baseMining","send","from","withdrawalNft","withdrawalUserBalance","updateBalance","getAvailableBalance","call","balance","useEffect","fetchTimeToWork","getLastMiningMapping","lastMine","getNow","now","waitPeriod","timeIntervalVar","nextWork","parseInt","availableBalanceVar","nowPc","Date","nowSeconds","getTime","setInterval","onClick","missingTime","hours","minutes","seconds","toString","xs","display","justifyContent","alignItems","width","GameModal","state","backdrop","toggle","bind","this","closeModal","modalText","won","wonValue","isOpen","open","borderColor","disabled","disabledButtonUpgrade","React","level1Animation","level2Animation","workButtonInactive","levelNft","gameStatus","playGame","establishments","CaveHead","Cave","Forest","CaveName","ForestName","GathererHead","HunterHead","FireBenderHead","FarmerHead","Farm","Castle","FarmName","CastleName","GuardianHead","KingHead","InternHead","Office1","Office2","Office1Name","Office2Name","CryptoInvestorHead","MetaMonkeyHead","Space","Mars","SpaceName","MarsName","CyborgHead","getEstablishments","NFTLevelText","Level1NFT","Level2NFT","height","backgroundColor","backgroundImage","ModalHeaderBg","backgroundPosition","backgroundSize","src","alt","ButtonPlaces","PossibleTargets","animation","Level1Places","top","Level2Places","NFTList","setNFTList","animationDuration","shouldAnimate","result","openModal","setOpenModal","setWon","setWonValue","openRouletteModal","setOpenRouletteModal","rouletteMonkeyType","rouletteMonkeyLevel","rouletteTokenData","setGameStatus","fetchData","isUserWallet","nftContract","balanceOf","userBalance","dataList","Array","keys","i","tokenOfOwnerByIndex","nftIndex","getNftData","nftData","push","NFTCards","token_id","tokenData","getLastResult","gameResult","baseFarm","wonAmmount","updateBetaBalance","setTimeout","md","metaMaskLogo","type","length","NFT","serialNumber","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","match","forceUpdate","setValue","value","useForceUpdate","AppHeader","AppSidebar","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2"],"sourceRoot":""}