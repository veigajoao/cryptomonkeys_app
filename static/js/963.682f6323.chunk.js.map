{"version":3,"file":"static/js/963.682f6323.chunk.js","mappings":"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","sources":["AppPages/NftInventory/Components/NftCard.js","AppPages/NftInventory/Components/UpgradeModal.js","AppPages/NftInventory/Components/NftContainer.js","AppPages/NftInventory/index.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardImg,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport caveMonkeyImg from \"../../../assets/monkeys/CaveMonkey.png\";\r\nimport gathererImg from \"../../../assets/monkeys/Gatherer.png\";\r\nimport hunterImg from \"../../../assets/monkeys/Hunter.png\";\r\nimport fireBenderImg from \"../../../assets/monkeys/FireBender.png\";\r\nimport farmerImg from \"../../../assets/monkeys/Farmer.png\";\r\nimport guardianImg from \"../../../assets/monkeys/Guardian.png\";\r\nimport kingImg from \"../../../assets/monkeys/King.png\";\r\nimport internImg from \"../../../assets/monkeys/Intern.png\";\r\nimport cryptoInvestorImg from \"../../../assets/monkeys/CryptoInvestor.png\";\r\nimport metaMonkeyImg from \"../../../assets/monkeys/MetaMonkey.png\";\r\nimport cyborgImg from \"../../../assets/monkeys/Cyborg.png\";\r\n\r\nconst getMonkeyName = (code) => {\r\n    const nameDict = {\r\n        \"1\": \"Cave Monkey\",\r\n        \"2\": \"Gatherer\",\r\n        \"3\": \"Hunter\",\r\n        \"4\": \"Firebender\",\r\n        \"5\": \"Farmer\",\r\n        \"6\": \"Guardian\",\r\n        \"7\": \"King\",\r\n        \"8\": \"Intern\",\r\n        \"9\": \"Crypto Investor\",\r\n        \"10\": \"Meta Monkey\",\r\n        \"11\": \"Cyborg\"\r\n    };\r\n    return nameDict[code];\r\n}\r\n\r\nconst getMonkeyIQ = (monkeyType) => {\r\n    const IQDict = {\r\n        \"1\": \"10\",\r\n        \"2\": \"15\",\r\n        \"3\": \"30\",\r\n        \"4\": \"50\",\r\n        \"5\": \"100\",\r\n        \"6\": \"130\",\r\n        \"7\": \"240\",\r\n        \"8\": \"425\",\r\n        \"9\": \"730\",\r\n        \"10\": \"945\",\r\n        \"11\": \"1450\"\r\n    };\r\n    return IQDict[monkeyType];\r\n}\r\n\r\nconst getMonkeyImage = (code) => {\r\n    const imgDict = {\r\n        \"1\": caveMonkeyImg,\r\n        \"2\": gathererImg,\r\n        \"3\": hunterImg,\r\n        \"4\": fireBenderImg,\r\n        \"5\": farmerImg,\r\n        \"6\": guardianImg,\r\n        \"7\": kingImg,\r\n        \"8\": internImg,\r\n        \"9\": cryptoInvestorImg,\r\n        \"10\": metaMonkeyImg,\r\n        \"11\": cyborgImg\r\n    };\r\n    return imgDict[code];\r\n}\r\n\r\nconst getMonkeyRarity = (code) => {\r\n    const rarityDict = {\r\n        \"1\": \"Common\",\r\n        \"2\": \"Common\",\r\n        \"3\": \"Common\",\r\n        \"4\": \"Common\",\r\n        \"5\": \"Rare\",\r\n        \"6\": \"Rare\",\r\n        \"7\": \"Rare\",\r\n        \"8\": \"Epic\",\r\n        \"9\": \"Epic\",\r\n        \"10\": \"Legendary\",\r\n        \"11\": \"Legendary\"\r\n    };\r\n\r\n    const rarityColorDict = {\r\n        \"Common\": \"grey\",\r\n        \"Rare\": \"gold\",\r\n        \"Epic\": \"purple\",\r\n        \"Legendary\": \"red\"\r\n    };\r\n\r\n    const rarity = rarityDict[code];\r\n    const rarityColor = rarityColorDict[rarity];\r\n\r\n    return (\r\n            <span className=\"position-absolute top-0 translate-middle badge rounded-pill\" style={{\"left\": \"50%\", \"fontSize\": \"1rem\", background: rarityColor, color: \"black\"}}>\r\n                {rarity}\r\n                <span className=\"visually-hidden\">rarity level</span>\r\n            </span>\r\n    );\r\n}\r\n\r\nconst NFTCard = (props) => {\r\n\r\n    const { monkeyType, monkeyLevel, tokenId, upgradeNftRequest } = props;\r\n\r\n    const monkeyName = getMonkeyName(monkeyType);\r\n\r\n    const monkeyImg = getMonkeyImage(monkeyType);\r\n\r\n    const monkeyRarity = getMonkeyRarity(monkeyType);\r\n\r\n    const monkeyIQ = getMonkeyIQ(monkeyType);\r\n\r\n    return (\r\n        <Col md=\"4\" sm=\"6\" xs=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"m-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                {monkeyRarity}\r\n                <CardImg top width=\"80%\" src={monkeyImg} alt=\"Common Portal\" />\r\n                <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>{monkeyName}</CardTitle>\r\n                    <CardSubtitle>#{tokenId}</CardSubtitle>\r\n                    <CardSubtitle>IQ Power: {monkeyIQ}</CardSubtitle>\r\n                    <CardSubtitle>Level: {monkeyLevel}</CardSubtitle>\r\n                    <Button onClick={upgradeNftRequest} disabled={monkeyLevel === \"2\"} color=\"primary\">Upgrade monkey</Button>\r\n                </CardBody>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default NFTCard;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Spinner\r\n} from \"reactstrap\";\r\n\r\nimport { upgradeCost } from \"../../../ethereum/web3\";\r\n\r\nclass UpgradeModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n      disabledButtonCancel: false,\r\n      disabledButtonUpgrade: false,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.changeBackdrop = this.changeBackdrop.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.NFTProcessPhase === 1) {\r\n      this.setState({disabledButtonCancel: true, disabledButtonUpgrade: true});\r\n    } else if (this.props.NFTProcessPhase === 2) {\r\n      this.setState({disabledButtonCancel: false, disabledButtonUpgrade: true});\r\n    } else if (this.props.NFTProcessPhase === 3) {\r\n      this.setState({disabledButtonCancel: false, disabledButtonUpgrade: true});\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  changeBackdrop(e) {\r\n    let value = e.target.value;\r\n    if (value !== \"static\") {\r\n      value = JSON.parse(value);\r\n    }\r\n    this.setState({ backdrop: value });\r\n  }\r\n\r\n  render() {\r\n\r\n    let modalText;\r\n    if (this.props.NFTProcessPhase === 0) {\r\n      modalText = (\r\n        <>\r\n          Are you sure you want to upgrade your NFT of type {this.props.monkeyType} to level 2?\r\n          Upgrade cost is {upgradeCost} $BNANA.\r\n        </>\r\n      );\r\n    } else if (this.props.NFTProcessPhase === 1) {\r\n      modalText = (\r\n        <>\r\n          <Spinner type=\"grow\" color=\"warning\" />\r\n          Please wait while the blockchain processes your transaction...\r\n        </>\r\n      )\r\n    } else if (this.props.NFTProcessPhase === 2) {\r\n      modalText = (\r\n        <>\r\n          Congratulations! Your NFT was upgraded to level 2!\r\n        </>\r\n      )\r\n    } else if (this.props.NFTProcessPhase === 3) {\r\n      modalText = (\r\n        <>\r\n          Looks like something went wrong... Some usual causes are: <br/><br/>\r\n          1. You didn't approve the transaction on MetaMask <br/><br/>\r\n          2. You don't have enough BNANA in your wallet for the transaction <br/><br/>\r\n          3. Your internet connection is unstable <br/><br/>\r\n          If you cannot use this functionality, please contact our team on telegram or \r\n          discord for assistance!\r\n        </>\r\n      )\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Char Upgrade</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            {modalText}\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonCancel} color=\"link\" onClick={this.toggle}>\r\n              Cancel\r\n            </Button>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={() => this.props.upgradeNftAccept()}>\r\n              Upgrade\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpgradeModal;","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Spinner\r\n} from \"reactstrap\";\r\n\r\nimport NFTCard from \"./NftCard\";\r\nimport UpgradeModal from \"./UpgradeModal\";\r\n\r\nimport { upgradeCost } from \"../../../ethereum/web3\";\r\n\r\nimport metaMaskLogo from \"../../../assets/metaMask/MetaMask.png\";\r\n\r\nconst NftContainer = () => {\r\n\r\n    const [NFTList, setNFTList] = useState(\"load\");\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [NFTUpgradeData, setNFTUpgradeData] = useState({});\r\n    const [NFTProcessPhase, setNFTProcessPhase] = useState(0);\r\n\r\n    const fetchData = async () => {\r\n      if (window.isUserWallet !== true) {\r\n        setNFTList(\"load\");\r\n        return \"\";\r\n      }\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      const userBalance = await window.nftContract.methods.balanceOf(walletHash[0]).call();\r\n      let dataList = [];\r\n\r\n      for (let i of Array(parseInt(userBalance)).keys()) {\r\n        let nftIndex = await window.nftContract.methods.tokenOfOwnerByIndex(walletHash[0], i).call();\r\n        let nftData = await window.nftContract.methods.getNftData(nftIndex).call();\r\n        dataList.push({nftIndex, nftData});\r\n      }\r\n      setNFTList(dataList);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (NFTList === \"load\") {\r\n        fetchData();\r\n      }\r\n    });\r\n\r\n    const upgradeNftRequest = async (nftData) => {\r\n      setNFTProcessPhase(0);\r\n      setOpenModal(true);\r\n      setNFTUpgradeData(nftData);\r\n      console.log(openModal);\r\n    };\r\n\r\n    const upgradeNftAccept = async () => {\r\n      console.log(\"b\");\r\n      setNFTProcessPhase(1);\r\n      console.log(NFTProcessPhase);\r\n      console.log(\"c\");\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      console.log(walletHash);\r\n      try {\r\n        await window.bnanaContract.methods.approve(window.nftContract.options.address, window.web3Instance.utils.toWei(upgradeCost, \"ether\")).send({\r\n          from: walletHash[0],\r\n          gas: '100000'\r\n        });\r\n        await window.nftContract.methods.upgradeNft(walletHash[0], NFTUpgradeData.tokenId).send({\r\n          from: walletHash[0],\r\n          gas: '100000'\r\n        });\r\n        setNFTProcessPhase(2);\r\n        fetchData();\r\n      } catch (err) {\r\n        console.log(err)\r\n        setNFTProcessPhase(3);\r\n      }\r\n    };\r\n\r\n    let NFTContent;\r\n    if (!window.isUserWallet) {\r\n      NFTContent = (\r\n        <Col md=\"12\">\r\n              <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                <CardBody>\r\n                  <CardTitle style={{color: \"white\"}}>\r\n                    <img src={metaMaskLogo} alt={\"\"} className='me-3' style={{width: \"50px\", height: \"auto\"}}/>\r\n                    Connect your wallet to see your NFT collection\r\n                  </CardTitle>\r\n                </CardBody>\r\n              </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList === \"load\") {\r\n      NFTContent = (\r\n          <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>\r\n                      <Spinner type=\"grow\" color=\"warning\" /> \r\n                    </CardTitle>\r\n                    <CardSubtitle style={{color: \"white\"}}>Loading your collection, please wait</CardSubtitle>\r\n                  </CardBody>\r\n                </Card>\r\n          </Col>\r\n      )\r\n    } else if (NFTList.length === 0) {\r\n      NFTContent = (\r\n          <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>\r\n                      Oh no, it seems that you don't have any cryptomonkeys NFT yet... <br/>\r\n                      Buy your first in the portals page!\r\n                    </CardTitle>\r\n                  </CardBody>\r\n                </Card>\r\n          </Col>\r\n      )\r\n    } else {\r\n      NFTContent = [];\r\n      for (const NFT of NFTList) {\r\n        if (!NFT.nftData[3]) {\r\n          continue;\r\n        }\r\n        let serialNumber = (parseInt(NFT.nftIndex) + 7834).toString();\r\n        NFTContent.push(\r\n          <NFTCard upgradeNftRequest={() => upgradeNftRequest({tokenId: NFT.nftIndex, nftData: NFT.nftData})} key={NFT.nftIndex} monkeyType={NFT.nftData[0]} monkeyLevel={NFT.nftData[1]} tokenId={serialNumber}/>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <TransitionGroup style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n          <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\r\n            timeout={1500} enter={false} exit={false}>\r\n            <Row className=\"text-center gx-0\" style={{width: \"90%\"}}>\r\n              <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>Your NFT Collection</CardTitle>\r\n                    <div className=\"divider\" />\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              {NFTContent}\r\n            </Row>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n      <UpgradeModal upgradeNftAccept={upgradeNftAccept} closeModal={() => setOpenModal(false)} open={openModal} NFTUpgradeData={NFTUpgradeData} NFTProcessPhase={NFTProcessPhase}/>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default NftContainer;\r\n","import React, { useState } from \"react\";\r\n\r\n// Layout\r\nimport AppHeader from \"../../Layout/AppHeader/\";\r\nimport AppSidebar from \"../../Layout/AppSidebar/\";\r\n\r\n// Internal components\r\nimport NftContainer from \"./Components/NftContainer\";\r\n\r\nfunction useForceUpdate(){\r\n  const [value, setValue] = useState(0); // integer state\r\n  return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nconst Portals = ({ match }) => {\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  return (\r\n    <>\r\n      <AppHeader forceUpdate={() => forceUpdate()} />\r\n      <div className=\"app-main\">\r\n        <AppSidebar />\r\n        <div className=\"app-main__outer\">\r\n          <div className=\"app-main__inner p-0\">\r\n            <NftContainer/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Portals;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","monkeyType","monkeyLevel","tokenId","upgradeNftRequest","monkeyName","monkeyImg","code","caveMonkeyImg","gathererImg","hunterImg","fireBenderImg","farmerImg","guardianImg","kingImg","internImg","cryptoInvestorImg","metaMonkeyImg","cyborgImg","getMonkeyImage","monkeyRarity","rarity","rarityColor","className","style","background","color","getMonkeyRarity","monkeyIQ","getMonkeyIQ","md","sm","xs","display","justifyContent","width","top","src","alt","onClick","disabled","UpgradeModal","state","backdrop","disabledButtonCancel","disabledButtonUpgrade","toggle","bind","changeBackdrop","this","NFTProcessPhase","setState","closeModal","e","value","target","JSON","parse","modalText","upgradeCost","type","isOpen","open","borderColor","upgradeNftAccept","React","useState","NFTList","setNFTList","openModal","setOpenModal","NFTUpgradeData","setNFTUpgradeData","setNFTProcessPhase","fetchData","window","isUserWallet","web3Instance","eth","getAccounts","walletHash","nftContract","methods","balanceOf","call","userBalance","dataList","Array","parseInt","keys","i","tokenOfOwnerByIndex","nftIndex","getNftData","nftData","push","useEffect","NFTContent","console","log","bnanaContract","approve","options","address","utils","toWei","send","from","gas","upgradeNft","length","NFT","serialNumber","toString","metaMaskLogo","height","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","match","forceUpdate","setValue","useForceUpdate","AppHeader","AppSidebar","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","F","s","n","done","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2"],"sourceRoot":""}