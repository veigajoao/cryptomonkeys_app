{"version":3,"file":"static/js/135.8be74cc5.chunk.js","mappings":"4SAkKA,EAvGgB,SAACA,GAEb,IA2CIC,EA3CJ,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAEQC,EAAuDX,EAAvDW,WAAYC,EAA2CZ,EAA3CY,YAAaC,EAA8Bb,EAA9Ba,QAASC,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,OAE9CC,EA1DW,CACb,EAAK,cACL,EAAK,WACL,EAAK,SACL,EAAK,aACL,EAAK,SACL,EAAK,WACL,EAAK,OACL,EAAK,SACL,EAAK,kBACL,GAAM,cACN,GAAM,UA+CuBL,GAE3BM,EA5Cc,SAACC,GACrB,IAqBMC,EArBa,CACf,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,GAAM,YACN,GAAM,aAUgBD,GACpBE,EARkB,CACpB,OAAU,OACV,KAAQ,OACR,KAAQ,SACR,UAAa,OAImBD,GAEpC,OACI,kBAAME,UAAU,+DAA+DC,MAAO,CAAC,SAAY,OAAQC,WAAYH,EAAaI,MAAO,SAA3I,UACSL,GACD,iBAAME,UAAU,kBAAhB,6BAgBSI,CAAgBd,GAmCrC,IAvBAe,EAAAA,EAAAA,YAAU,WACN,GAAKjB,EAOE,CACH,IAAMkB,EAAe,mCAAG,wGACCC,OAAOC,aAAaC,QAAQC,qBAAqBhB,GAAQiB,OAD1D,cAChBC,EADgB,gBAEJL,OAAOC,aAAaC,QAAQI,SAASF,OAFjC,OAEhBG,EAFgB,OAGhBC,EAAWC,SAASJ,GAAY,MAChCI,SAASF,GAAOC,IAChB1B,GAAW,GACXF,EAAY4B,IANI,2CAAH,qDASrBT,SAhBKxB,IACDC,GAAgB,GAChBkC,aAAY,WACRhC,EAAWD,EAAU,KACtB,QAcZ,CAACE,EAAUE,EAASJ,EAASF,EAAcY,IAG1CN,EACAR,GACI,oDAED,CACH,IAGIsC,EAAchC,GAHR,IAAIiC,MACOC,UAAY,IAI7BC,EAAQL,SAASE,EAAc,MAC/BI,EAAUN,SAAUE,EAAc,KAAQ,IAC1CK,EAAUP,SAASE,EAAc,IAEjCI,EAAU,KACVA,EAAU,IAAMA,EAAQE,YAExBD,EAAU,KACVA,EAAU,IAAMA,EAAQC,YAG5B5C,GACI,4CAAYyC,EAAZ,IAAoBC,EAApB,IAA8BC,KAItC,OACI,SAAC,KAAD,CAAKE,GAAG,KAAKxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,MAAO,QAA7F,UACI,SAAC,KAAD,CAAM7B,UAAU,YAAYC,MAAO,CAAC4B,MAAO,MAAO3B,WAAY,UAAWC,MAAO,SAAhF,UACM,SAAC,KAAD,WACE,UAAC,KAAD,CAAKH,UAAU,mBAAf,WACQ,UAAC,KAAD,CAAKyB,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,QAArD,cACMnC,MAEN,SAAC,KAAD,CAAKiC,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,QAArD,SACKhC,KAEL,SAAC,KAAD,CAAK8B,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAArD,SACK/B,KAEL,UAAC,KAAD,CAAK6B,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAArD,oBACYpC,MAEZ,SAAC,KAAD,CAAKkC,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAArD,SACK/C,KAEL,SAAC,KAAD,CAAK6C,GAAG,IAAIxB,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAArD,UACI,SAAC,KAAD,CAAQG,UAAW1C,EAAS2C,QAhFzC,WACX,GAAI3C,EAAS,CACTK,IACAJ,GAAW,GACX,IAAIyB,EAAM,IAAIK,KACVa,EAAahB,SAASF,EAAIM,UAAY,KAC1CjC,EAAY6C,EAAa,SA0EwC7B,MAAM,UAAnD,+B,yJC/FhC,EAhDM8B,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYtD,GAAQ,IAAD,yBACjB,cAAMA,IACDuD,MAAQ,CACXC,UAAU,GAGZ,EAAKC,OAAS,EAAKA,OAAOC,MAAZ,WANG,EA4ClB,OArCA,8BAED,WACEC,KAAK3D,MAAM4D,eACZ,oBAED,WAEE,IAAIC,EAgBJ,OAdEA,EADEF,KAAK3D,MAAM8D,KAEX,iEACiCH,KAAK3D,MAAM+D,SAD5C,aAC8D,sBAK9D,uGACqE,kBADrE,sFAEoF,sBAMpF,UAAC,KAAD,CAAOC,OAAQL,KAAK3D,MAAMiE,KAAMR,OAAQE,KAAKF,OAAQpC,UAAWsC,KAAK3D,MAAMqB,UAAWmC,SAAUG,KAAKJ,MAAMC,SAA3G,WACE,SAAC,KAAD,CAAalC,MAAO,CAACC,WAAY,UAAWC,MAAO,QAAS0C,YAAa,WAAaT,OAAQE,KAAKF,OAAnG,0BACA,SAAC,KAAD,CAAWnC,MAAO,CAACC,WAAY,UAAWC,MAAO,SAAjD,SACGqC,KAEH,UAAC,KAAD,CAAavC,MAAO,CAACC,WAAY,UAAWC,MAAO,QAAS0C,YAAa,WAAzE,WACE,SAAC,KAAD,CAAQf,SAAUQ,KAAKJ,MAAMY,sBAAuB3C,MAAM,UAAU4B,QAASO,KAAKF,OAAlF,gBAEU,cAInB,EA7CGH,CAAkBc,EAAAA,W,GCAQA,EAAAA,U,kTCkPhC,GA9KsB,SAACpE,GAAW,IAAD,EAUzBqE,EACAC,EACAC,EAVIP,EAAmEhE,EAAnEgE,OAAQJ,EAA2D5D,EAA3D4D,WAAYjD,EAA+CX,EAA/CW,WAAY6D,EAAmCxE,EAAnCwE,SAAUC,EAAyBzE,EAAzByE,WAAY3D,EAAad,EAAbc,SAE1D4D,EArBkB,SAAC/D,GAcvB,MAbwB,CACpB,EAAK,CAACgE,EAAUC,EAAMC,EAAQC,EAAUC,GACxC,EAAK,CAACC,EAAcJ,EAAMC,EAAQC,EAAUC,GAC5C,EAAK,CAACE,EAAYL,EAAMC,EAAQC,EAAUC,GAC1C,EAAK,CAACG,EAAgBN,EAAMC,EAAQC,EAAUC,GAC9C,EAAK,CAACI,EAAYC,EAAMC,EAAQC,EAAUC,GAC1C,EAAK,CAACC,EAAcJ,EAAMC,EAAQC,EAAUC,GAC5C,EAAK,CAACE,EAAUL,EAAMC,EAAQC,EAAUC,GACxC,EAAK,CAACG,EAAYC,EAASC,EAASC,EAAaC,GACjD,EAAK,CAACC,EAAoBJ,EAASC,EAASC,EAAaC,GACzD,GAAM,CAACE,GAAgBC,EAAOC,EAAMC,EAAWC,GAC/C,GAAM,CAACC,GAAYJ,EAAOC,EAAMC,EAAWC,IAEtBzF,GAOJ2F,CAAkB3F,GAInC4F,EAA4B,MAAb/B,EAAmBgC,EAAYC,EAM/B,YAAfhC,GACAJ,EAAkB,UAClBC,EAAkB,UAClBC,GAAqB,GACC,YAAfE,GACPJ,EAAkB,kBAClBC,EAAkB,kBAClBC,GAAqB,GACC,aAAfE,GACPJ,EAAkB,WAClBC,EAAkB,UAClBC,GAAqB,GACC,aAAfE,IACPJ,EAAkB,UAClBC,EAAkB,WAClBC,GAAqB,GAOzB,OACI,+BACJ,SAAC,KAAD,CAAOP,OAAQA,EAAQP,OANR,WACXG,KAKmCJ,UAAU,EAAMnC,UAAU,iCACjEC,MAAO,CAAC4B,MAAO,OAAQwD,OAAQ,OAAQC,gBAAiB,oBADxD,UAIA,UAAC,KAAD,CAAWtF,UAAU,WAArB,WACI,SAAC,KAAD,CAAKA,UAAU,mBAAmBC,MAAO,CAAC4B,MAAO,QAAjD,UACI,UAAC,KAAD,CAAKJ,GAAG,KAAR,WACI,gBACIzB,UAAU,gDACVC,MAAO,CACHsF,gBAAgB,OAAD,OAASC,EAAT,KACfC,mBAAoB,SACpBC,eAAgB,QAChBvF,MAAO,QAAS0C,YAAa,UAC7BwC,OAAQ,QAPhB,UAUI,gBAAKpF,MAAO,CAACoF,OAAQ,SAAUM,IAAKtC,EAAe,GAAIuC,IAAK,QAIhE,iBACA5F,UAAU,qGACVC,MAAO,CACHC,WAAW,OAAD,OAAS2F,EAAT,KACVJ,mBAAoB,SACpBC,eAAgB,QAChB7D,MAAO,MACPwD,OAAQ,OAPZ,WAUI,gBAAKpF,MAAO,CAAC4B,MAAO,OAAQ8D,IAAKT,EAAcU,IAAK,MACpD,iBAAM5F,UAAU,kBAAhB,0BAKZ,SAAC,KAAD,CAAKA,UAAU,mBAAmBC,MAAO,CAAC4B,MAAO,QAAjD,UACI,SAAC,KAAD,CAAKJ,GAAG,KAAR,UACI,gBACIxB,OAAK,QACDC,WAAY,kBADX,aAEW,wEAHpB,UAMI,gBAAKF,UAAU,YAAYC,MAAO,CAAC4B,MAAO,OAAQ8D,IAAKG,EAAiBF,IAAK,YAKzF,SAAC,KAAD,CAAK5F,UAAU,mBAAf,UACI,SAAC,KAAD,CAAKyB,GAAG,KAAR,UAEI,iBAAKxB,MAAO,CACRE,MAAO,QACPD,WAAY,yEAFhB,WAMI,iBAAKF,UAAU,mDAAf,WAEA,gBAAKA,UAAU,+DAAf,UACQ,UAAC,KAAD,CAAMA,UAAS,+BAAkCC,MAAO,CACpD4B,MAAO,MAAO1B,MAAO,QACrB4F,UAAU,GAAD,OAAK/C,EAAL,wBAFb,WAII,iBACAhD,UAAU,6FACVC,MAAO,CACHC,WAAW,OAAD,OAAS2F,EAAT,KACVJ,mBAAoB,SACpBC,eAAgB,QAChB7D,MAAO,MACPwD,OAAQ,OAPZ,WAUI,gBAAKpF,MAAO,CAAC4B,MAAO,OAAQ8D,IAAKK,EAAcJ,IAAK,MACpD,iBAAM5F,UAAU,kBAAhB,qBAEJ,SAAC,KAAD,CAASiG,KAAG,EAACN,IAAKtC,EAAe,GAAIuC,IAAI,yBACzC,SAAC,KAAD,CAAU5F,UAAU,cAApB,UACI,gBAAK2F,IAAKtC,EAAe,GAAIuC,IAAK,aAK9C,gBAAK5F,UAAU,+DAAf,UACI,UAAC,KAAD,CAAMA,UAAS,uCAAkCiD,GAAmBhD,MAAO,CACvE4B,MAAO,MAAO1B,MAAO,QACrB4F,UAAU,GAAD,OAAK9C,EAAL,wBAFb,WAII,iBACAjD,UAAU,6FACVC,MAAO,CACHC,WAAW,OAAD,OAAS2F,EAAT,KACVJ,mBAAoB,SACpBC,eAAgB,QAChB7D,MAAO,MACPwD,OAAQ,OAPZ,WAUI,gBAAKpF,MAAO,CAAC4B,MAAO,OAAQ8D,IAAKO,EAAcN,IAAK,MACpD,iBAAM5F,UAAU,kBAAhB,qBAEJ,SAAC,KAAD,CAASiG,KAAG,EAACN,IAAKtC,EAAe,GAAIuC,IAAI,yBACzC,SAAC,KAAD,CAAU5F,UAAU,cAApB,UACI,gBAAK2F,IAAKtC,EAAe,GAAIuC,IAAK,gBAOlD,mBAAQ3F,OAAK,GACTC,WAAY,mBADH,sBAEG,yEAFH,kBAGD,MAHC,iBAIF,UAJE,sBAKG,SALH,oBAMC,WAND,iBAOF,SAPE,GAQVF,UAAU,oBACb8B,SAAUoB,EACVnB,QAAStC,EAVT,iC,wBCVpB,GAnLsB,SAACd,GAEnB,OAA8BE,EAAAA,EAAAA,UAAS,QAAvC,eAAOsH,EAAP,KAAgBC,EAAhB,KACA,GAAwCvH,EAAAA,EAAAA,UAAS,CAC/CW,QAAS,OACTF,WAAY,IACZ+G,kBAAmB,KACnBC,eAAe,EACfC,OAAQ,IALV,eAQA,GARA,WAQkC1H,EAAAA,EAAAA,WAAS,IAA3C,eAAO2H,EAAP,KAAkBC,EAAlB,KACA,GAAsB5H,EAAAA,EAAAA,WAAS,GAA/B,eAAO4D,EAAP,KAAYiE,EAAZ,KACA,GAAgC7H,EAAAA,EAAAA,UAAS,GAAzC,eAAO6D,EAAP,KAAiBiE,EAAjB,KAEA,GAAkD9H,EAAAA,EAAAA,WAAS,GAA3D,eAAO+H,EAAP,KAA0BC,EAA1B,KACA,GAAoDhI,EAAAA,EAAAA,UAAS,KAA7D,eAAOiI,EAAP,KAA2BC,EAA3B,KACA,GAAsDlI,EAAAA,EAAAA,UAAS,KAA/D,eAAOmI,EAAP,KAA4BC,EAA5B,KACA,GAAkDpI,EAAAA,EAAAA,UAAS,IAA3D,eAAOqI,EAAP,KAA0BC,EAA1B,KACA,GAAoCtI,EAAAA,EAAAA,UAAS,WAA7C,eAAOuE,EAAP,KAAmBgE,EAAnB,KACA,GAA0BvI,EAAAA,EAAAA,UAAS,IAAnC,eAEMwI,GAFN,UAEe,mCAAG,sGACY,IAAxB9G,OAAO+G,aADK,uBAEdlB,EAAW,QAFG,kBAGP,IAHO,uBAKS7F,OAAOgH,aAAaC,IAAIC,cALjC,cAKVC,EALU,gBAMUnH,OAAOoH,YAAYlH,QAAQmH,UAAUF,EAAW,IAAI/G,OAN9D,OAMVkH,EANU,OAOZC,EAAW,GAPC,UASFC,MAAM/G,SAAS6G,IAAcG,QAT3B,kEASPC,EATO,kBAUO1H,OAAOoH,YAAYlH,QAAQyH,oBAAoBR,EAAW,GAAIO,GAAGtH,OAVxE,eAUVwH,EAVU,iBAWM5H,OAAOoH,YAAYlH,QAAQ2H,WAAWD,GAAUxH,OAXtD,QAWV0H,EAXU,OAYdP,EAASQ,KAAK,CAACH,SAAAA,EAAUE,QAAAA,IAZX,iJAchBjC,EAAW0B,GAdK,iEAAH,uDAiBfzH,EAAAA,EAAAA,YAAU,WACQ,SAAZ8F,GACFkB,OAIJ,IAsDIkB,EAtDE9I,EAAQ,mCAAG,qGAEX+I,EAAWtB,EAAkBiB,SAC3BM,EAAYvB,EAClBE,EAAc,WAJC,SAKU7G,OAAOgH,aAAaC,IAAIC,cALlC,cAKTC,EALS,gBAMTnH,OAAOC,aAAaC,QAAQiI,WAAWF,GAAUG,KAAK,CAACC,KAAMlB,EAAW,KAN/D,wBAOUnH,OAAOC,aAAaC,QAAQoI,cAAcL,GAAU7H,OAP9D,QAOTmI,EAPS,OA9DAxJ,EAwEY4H,EAAkBmB,QAAQ,GAAjDU,EAvEQ,CACZ,EAAK,KACL,EAAK,KACL,EAAK,KACL,EAAK,KACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,KACL,EAAK,KACL,GAAM,MACN,GAAM,OAEOzJ,GA4DgB,MAAzBmJ,EAAUJ,QAAQ,IACpB3B,GAAO,GAEPC,EADIqC,EAA4B,IAAfF,EAAmB,EAAIC,EAAWA,IAEnDE,EAAAA,GAAAA,IAAkBD,IAGC,MAAfF,EACFpC,GAAO,IAEPA,GAAO,GACPC,EAAYoC,IACZE,EAAAA,GAAAA,IAAkBF,IAItBG,YAAW,WAEU,MAAfJ,EACF1B,EAAc,YACU,MAAf0B,GACT1B,EAAc,YAIhB8B,YAAW,WACTzC,GAAa,KACZ,OAEF,KAzCY,kCA9DD,IAACnH,IA8DA,OAAH,qDAuDd,IAA4B,IAAxBiB,OAAO+G,aACTiB,GACE,SAAC,KAAD,CAAK9G,GAAG,KAAK0H,GAAG,KAAKlJ,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAM3B,UAAU,YAAYC,MAAO,CAAC4B,MAAO,MAAO3B,WAAY,UAAWC,MAAO,SAAhF,UACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,WACE,gBAAKwF,IAAKyD,GAAcxD,IAAK,GAAI5F,UAAU,OAAOC,MAAO,CAAC4B,MAAO,OAAQwD,OAAQ,UADnF,+DAQL,GAAgB,SAAZc,EACToC,GACE,SAAC,KAAD,CAAK9G,GAAG,KAAK0H,GAAG,KAAKlJ,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAM3B,UAAU,YAAYC,MAAO,CAAC4B,MAAO,MAAO3B,WAAY,UAAWC,MAAO,SAAhF,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,UACE,SAAC,KAAD,CAASkJ,KAAK,OAAOlJ,MAAM,eAE7B,SAAC,KAAD,CAAcF,MAAO,CAACE,MAAO,SAA7B,8DAKL,GAAuB,IAAnBgG,EAAQmD,OACjBf,GACE,SAAC,KAAD,CAAK9G,GAAG,KAAK0H,GAAG,KAAKlJ,MAAO,CAACyB,QAAS,OAAQC,eAAgB,UAA9D,UACI,SAAC,KAAD,CAAM3B,UAAU,YAAYC,MAAO,CAAC4B,MAAO,MAAO3B,WAAY,UAAWC,MAAO,SAAhF,UACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWF,MAAO,CAACE,MAAO,SAA1B,gIAOL,CACLoI,EAAW,GADN,kBAEapC,GAFb,0BAEMoD,EAFN,SAGH,IAAKA,EAAIlB,QAAQ,GACf,iBAEF,IAAImB,GAAgBxI,SAASuI,EAAIpB,UAAY,MAAM3G,WACnD+G,EAASD,MACP,SAAC,EAAD,CAA4B5I,OAAQ6J,EAAIpB,SAAU7I,WAAYiK,EAAIlB,QAAQ,GAAI9I,YAAagK,EAAIlB,QAAQ,GAAI7I,QAASgK,EAAc/J,SAAU,kBAxDjI,SAAC8J,GAChBE,QAAQC,IAAIH,GACZ1C,GAAqB,GACrBM,EAAqBoC,GACrBxC,EAAsBwC,EAAIlB,QAAQ,IAClCpB,EAAuBsC,EAAIlB,QAAQ,IACnCjB,EAAc,WAkDwIuC,CAASJ,KAA7IA,EAAIpB,YANtB,8BAA2B,KAFtB,mCAaP,OACE,UAAC,EAAAyB,SAAD,YACE,SAAC,EAAAC,gBAAD,CAAiB5J,MAAO,CAAC4B,MAAO,OAAQH,QAAS,OAAQC,eAAgB,UAAzE,UACE,SAAC,EAAAmI,cAAD,CAAeC,UAAU,MAAMC,WAAW,gBAAgBC,QAAQ,EAChEC,QAAS,KAAMC,OAAO,EAAOC,MAAM,EADrC,UAEE,UAAC,KAAD,CAAKpK,UAAU,mBAAmBC,MAAO,CAAC4B,MAAO,OAAjD,WACE,SAAC,KAAD,CAAKsH,GAAG,KAAR,UACE,SAAC,KAAD,CAAMnJ,UAAU,sBAAsBC,MAAO,CAACC,WAAY,WAA1D,UACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAWD,MAAO,CAACE,MAAO,SAA1B,kCACsB,kBADtB,2CAIA,gBAAKH,UAAU,mBAIpBuI,UAIP,SAAC,EAAD,CAAWhG,WAAY,kBAAMkE,GAAa,IAAQ7D,KAAM4D,EAAW/D,IAAKA,EAAKC,SAAUA,KAEvF,SAAC,GAAD,CAAeH,WAAY,kBAAMsE,GAAqB,IAAQlE,OAAQiE,EAAmBtH,WAAYwH,EAAoB3D,SAAU6D,EAAqB5D,WAAYA,EAAY3D,SAAUA,QCvMlM,IAoBA,GApBiB,SAAC,GAAc,EAAZ4K,MAAa,IAEzBC,EAPR,WACE,OAA0BzL,EAAAA,EAAAA,UAAS,GAAnC,eAAc0L,GAAd,WACA,OAAO,kBAAMA,GAAS,SAAAC,GAAK,OAAIA,EAAQ,MAKnBC,GAEpB,OACE,iCAEE,SAACC,EAAA,EAAD,CAAWJ,YAAa,kBAAMA,QAC9B,iBAAKtK,UAAU,WAAf,WACE,SAAC2K,EAAA,EAAD,KACA,gBAAK3K,UAAU,kBAAf,UACE,gBAAKA,UAAU,sBAAf,UACE,SAAC,GAAD,gB,gkhFCzBG,SAAS4K,EAA2BC,EAAGC,GACpD,IAAIC,EAAuB,qBAAXC,QAA0BH,EAAEG,OAAOC,WAAaJ,EAAE,cAElE,IAAKE,EAAI,CACP,GAAIhD,MAAMmD,QAAQL,KAAOE,GAAK,OAA2BF,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEvB,OAAqB,CAC/GyB,IAAIF,EAAIE,GACZ,IAAI9C,EAAI,EAEJkD,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIpD,GAAK4C,EAAEvB,OAAe,CACxBgC,MAAM,GAED,CACLA,MAAM,EACNd,MAAOK,EAAE5C,OAGbsD,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGN,GAIP,MAAM,IAAIO,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLT,EAAG,WACDL,EAAKA,EAAGpK,KAAKkK,IAEfQ,EAAG,WACD,IAAIS,EAAOf,EAAGgB,OAEd,OADAH,EAAmBE,EAAKR,KACjBQ,GAETP,EAAG,SAAWS,GACZH,GAAS,EACTF,EAAMK,GAERP,EAAG,WACD,IACOG,GAAoC,MAAhBb,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIc,EAAQ,MAAMF","sources":["AppPages/FarmMode/Components/NftCard.js","AppPages/FarmMode/Components/GameModal.js","AppPages/FarmMode/Components/InstructionsModal.js","AppPages/FarmMode/Components/RouletteModal.js","AppPages/FarmMode/Components/GameContainer.js","AppPages/FarmMode/index.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nconst getMonkeyName = (code) => {\r\n    const nameDict = {\r\n        \"1\": \"Cave Monkey\",\r\n        \"2\": \"Gatherer\",\r\n        \"3\": \"Hunter\",\r\n        \"4\": \"Firebender\",\r\n        \"5\": \"Farmer\",\r\n        \"6\": \"Guardian\",\r\n        \"7\": \"King\",\r\n        \"8\": \"Intern\",\r\n        \"9\": \"Crypto Investor\",\r\n        \"10\": \"Meta Monkey\",\r\n        \"11\": \"Cyborg\"\r\n    };\r\n    return nameDict[code];\r\n}\r\n\r\nconst getMonkeyRarity = (code) => {\r\n    const rarityDict = {\r\n        \"1\": \"Common\",\r\n        \"2\": \"Common\",\r\n        \"3\": \"Common\",\r\n        \"4\": \"Common\",\r\n        \"5\": \"Rare\",\r\n        \"6\": \"Rare\",\r\n        \"7\": \"Rare\",\r\n        \"8\": \"Epic\",\r\n        \"9\": \"Epic\",\r\n        \"10\": \"Legendary\",\r\n        \"11\": \"Legendary\"\r\n    };\r\n\r\n    const rarityColorDict = {\r\n        \"Common\": \"grey\",\r\n        \"Rare\": \"gold\",\r\n        \"Epic\": \"purple\",\r\n        \"Legendary\": \"red\"\r\n    };\r\n\r\n    const rarity = rarityDict[code];\r\n    const rarityColor = rarityColorDict[rarity];\r\n\r\n    return (\r\n        <span className=\"position-absolute top-50 translate-middle badge rounded-pill\" style={{\"fontSize\": \"1rem\", background: rarityColor, color: \"black\"}}>\r\n                {rarity}\r\n                <span className=\"visually-hidden\">rarity level</span>\r\n        </span>\r\n    );\r\n}\r\n\r\nconst NFTCard = (props) => {\r\n\r\n    const [isCounterSet, setIsCounterSet] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [timeWork, setTimeWork] = useState(0);\r\n    const [canWork, setCanWork] = useState(true);\r\n\r\n    const { monkeyType, monkeyLevel, tokenId, playGame, nft_id } = props;\r\n\r\n    const monkeyName = getMonkeyName(monkeyType);\r\n\r\n    const monkeyRarity = getMonkeyRarity(monkeyType);\r\n\r\n    const goWork = () => {\r\n        if (canWork) {\r\n            playGame();\r\n            setCanWork(false);\r\n            let now = new Date()\r\n            let nowSeconds = parseInt(now.getTime() / 1000)\r\n            setTimeWork(nowSeconds + 28800);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!canWork) {\r\n            if (!isCounterSet) {\r\n                setIsCounterSet(true);\r\n                setInterval(() => {\r\n                    setCounter(counter + 1);\r\n                }, 1000);\r\n            }\r\n        } else {\r\n            const fetchTimeToWork = async () => {\r\n                let lastMine = await window.gameContract.methods.getLastMiningMapping(nft_id).call();\r\n                let now = await window.gameContract.methods.getNow().call();\r\n                let nextWork = parseInt(lastMine) + 28800;\r\n                if (parseInt(now) < nextWork) {\r\n                    setCanWork(false);\r\n                    setTimeWork(nextWork);\r\n                }\r\n            }\r\n            fetchTimeToWork();\r\n        }\r\n    }, [timeWork, canWork, counter, isCounterSet, nft_id])\r\n\r\n    let workStatus;\r\n    if (canWork) {\r\n        workStatus = (\r\n            <>Ready to work</>\r\n        )\r\n    } else {\r\n        let now = new Date()\r\n        let nowSeconds = now.getTime() / 1000\r\n\r\n        let missingTime = timeWork - nowSeconds;\r\n\r\n        let hours = parseInt(missingTime / 3600);\r\n        let minutes = parseInt((missingTime % 3600) / 60);\r\n        let seconds = parseInt(missingTime % 60);\r\n\r\n        if (minutes < 10) {\r\n            minutes = \"0\" + minutes.toString();\r\n        }\r\n        if (seconds < 10) {\r\n            seconds = \"0\" + seconds.toString();\r\n        }\r\n\r\n        workStatus = (\r\n            <>Ready in {hours}:{minutes}:{seconds}</>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Col xs=\"12\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", width: \"100%\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                  <CardBody>\r\n                    <Row className=\"text-center gx-0\">\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\"}}>\r\n                                #{tokenId}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"left\"}}>\r\n                                {monkeyName}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                {monkeyRarity}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                Level: {monkeyLevel}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                {workStatus}\r\n                            </Col>\r\n                            <Col xs=\"2\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                                <Button disabled={!canWork} onClick={goWork} color=\"primary\">WORK!</Button>\r\n                            </Col>\r\n                            \r\n                    </Row>\r\n                  </CardBody>\r\n            </Card>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default NFTCard;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass GameModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    let modalText;\r\n    if (this.props.won) {\r\n      modalText = (\r\n        <>\r\n          Congratulations, you just won {this.props.wonValue} $BNANA! <br/>\r\n        </>\r\n      );\r\n    } else {\r\n      modalText = (\r\n        <>\r\n          Unfortunatelly your monkey is not ready to farm at this station :( <br/>\r\n          Upgrade him to level 2 so that you can earn $BNANA even if you land at this spot. <br/>\r\n        </>\r\n      )\r\n    } \r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            {modalText}\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameModal;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass InstructionsModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backdrop: true,\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.props.closeModal()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className} backdrop={this.state.backdrop}>\r\n          <ModalHeader style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}  toggle={this.toggle}>Game result</ModalHeader>\r\n          <ModalBody style={{background: \"#6C32A6\", color: \"white\"}}>\r\n            Use the time machine to bring your monkey to the closest workstation. <br/>\r\n            Each NFT monkey in your collection is able to work 3 times a day, \r\n            with an eight hour interval (complying with union regulations). <br/>\r\n            The time machine brings your monkey to a random location, there's a 20% chance that the time machine will bring your monkey to a level 2 workstation.\r\n            If that happens, you'll get 6 times the rewards. But beware, only level 2 monkeys are able to perform these task,\r\n            if your monkey is level 1 and lands at a level 2 workstation, you'll get no rewards...\r\n          </ModalBody>\r\n          <ModalFooter style={{background: \"#561473\", color: \"white\", borderColor: \"#561473\"}}>\r\n            <Button disabled={this.state.disabledButtonUpgrade} color=\"primary\" onClick={this.toggle}>\r\n              Ok\r\n            </Button>{\" \"}\r\n          </ModalFooter>\r\n        </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InstructionsModal;","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport \"./Roulette.css\"\r\n\r\nimport ModalHeaderBg from \"../../../assets/roulette/header_bg/fire.png\";\r\nimport PossibleTargets from \"../../../assets/roulette/level_places/possible_targets.png\";\r\nimport Work from \"../../../assets/roulette/level_places/work.png\";\r\n\r\nimport ButtonPlaces from \"../../../assets/roulette/level_places/button_place_level.png\";\r\nimport Level1Places from \"../../../assets/roulette/level_places/level_1.png\";\r\nimport Level2Places from \"../../../assets/roulette/level_places/level_2.png\";\r\n\r\nimport Level1NFT from \"../../../assets/roulette/nft_level/lvl1.png\";\r\nimport Level2NFT from \"../../../assets/roulette/nft_level/lvl2.png\";\r\n\r\nimport CaveName from \"../../../assets/roulette/place_names/cave.png\";\r\nimport ForestName from \"../../../assets/roulette/place_names/forest.png\";\r\nimport FarmName from \"../../../assets/roulette/place_names/farm.png\";\r\nimport CastleName from \"../../../assets/roulette/place_names/castle.png\";\r\nimport Office1Name from \"../../../assets/roulette/place_names/office.png\";\r\nimport Office2Name from \"../../../assets/roulette/place_names/company.png\";\r\nimport SpaceName from \"../../../assets/roulette/place_names/spaceship.png\";\r\nimport MarsName from \"../../../assets/roulette/place_names/mars.png\";\r\n\r\nimport CaveHead from \"../../../assets/roulette/monkeys/CaveMonkey.png\"\r\nimport GathererHead from \"../../../assets/roulette/monkeys/Gatherer.png\"\r\nimport HunterHead from \"../../../assets/roulette/monkeys/Hunter.png\"\r\nimport FireBenderHead from \"../../../assets/roulette/monkeys/FireBender.png\"\r\nimport FarmerHead from \"../../../assets/roulette/monkeys/Farmer.png\"\r\nimport GuardianHead from \"../../../assets/roulette/monkeys/Guardian.png\"\r\nimport KingHead from \"../../../assets/roulette/monkeys/King.png\"\r\nimport InternHead from \"../../../assets/roulette/monkeys/Intern.png\"\r\nimport CryptoInvestorHead from \"../../../assets/roulette/monkeys/CryptoInvestor.png\"\r\nimport MetaMonkeyHead from \"../../../assets/roulette/monkeys/MetaMonkey.png\"\r\nimport CyborgHead from \"../../../assets/roulette/monkeys/Cyborg.png\"\r\n\r\nimport Cave from \"../../../assets/establishments/Cave.jpg\";\r\nimport Forest from \"../../../assets/establishments/Forest.jpg\";\r\nimport Farm from \"../../../assets/establishments/Farm.jpg\";\r\nimport Castle from \"../../../assets/establishments/Castle.jpg\";\r\nimport Office1 from \"../../../assets/establishments/Office1.jpg\";\r\nimport Office2 from \"../../../assets/establishments/Office2.jpg\";\r\nimport Space from \"../../../assets/establishments/Space.jpg\";\r\nimport Mars from \"../../../assets/establishments/Mars.jpg\";\r\n\r\nconst getEstablishments = (monkeyType) => {\r\n    let establishmentsMap = {\r\n        \"1\": [CaveHead, Cave, Forest, CaveName, ForestName],\r\n        \"2\": [GathererHead, Cave, Forest, CaveName, ForestName],\r\n        \"3\": [HunterHead, Cave, Forest, CaveName, ForestName],\r\n        \"4\": [FireBenderHead, Cave, Forest, CaveName, ForestName],\r\n        \"5\": [FarmerHead, Farm, Castle, FarmName, CastleName],\r\n        \"6\": [GuardianHead, Farm, Castle, FarmName, CastleName],\r\n        \"7\": [KingHead, Farm, Castle, FarmName, CastleName],\r\n        \"8\": [InternHead, Office1, Office2, Office1Name, Office2Name],\r\n        \"9\": [CryptoInvestorHead, Office1, Office2, Office1Name, Office2Name],\r\n        \"10\": [MetaMonkeyHead, Space, Mars, SpaceName, MarsName],\r\n        \"11\": [CyborgHead, Space, Mars, SpaceName, MarsName],\r\n    };\r\n    return establishmentsMap[monkeyType];\r\n}\r\n\r\nconst RouletteModal = (props) => {\r\n\r\n    const { isOpen, closeModal, monkeyType, levelNft, gameStatus, playGame } = props;\r\n\r\n    let establishments = getEstablishments(monkeyType);\r\n\r\n    // let animationName = shouldAnimate ? establishments[0] : \"noAnimation\";\r\n\r\n    let NFTLevelText = levelNft === \"1\" ? Level1NFT : Level2NFT;\r\n\r\n    let level1Animation;\r\n    let level2Animation;\r\n    let workButtonInactive;\r\n\r\n    if (gameStatus === \"preGame\") {\r\n        level1Animation = \"not-won\";\r\n        level2Animation = \"not-won\";\r\n        workButtonInactive = false;\r\n    } else if (gameStatus === \"playing\") {\r\n        level1Animation = \"lvl1_transition\";\r\n        level2Animation = \"lvl2_transition\";\r\n        workButtonInactive = true;\r\n    } else if (gameStatus === \"game1won\") {\r\n        level1Animation = \"game-won\";\r\n        level2Animation = \"not-won\";\r\n        workButtonInactive = true;\r\n    } else if (gameStatus === \"game2won\") {\r\n        level1Animation = \"not-won\";\r\n        level2Animation = \"game-won\";\r\n        workButtonInactive = true;\r\n    }\r\n\r\n    const toggle = () => {\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n    <Modal isOpen={isOpen} toggle={toggle} backdrop={true} className=\"modal-lg modal-dialog-centered\"\r\n    style={{width: \"60vw\", height: \"80vh\", backgroundColor: \"rgba(0, 0, 0, 0)\"}}\r\n    >\r\n\r\n    <ModalBody className=\"gx-0 p-0\">\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    className=\"d-flex justify-content-evenly align-items-end\"\r\n                    style={{\r\n                        backgroundImage: `url(${ModalHeaderBg})`,\r\n                        backgroundPosition: \"center\",\r\n                        backgroundSize: \"cover\",\r\n                        color: \"white\", borderColor: \"#561473\",\r\n                        height: \"90px\"\r\n                    }}\r\n                >\r\n                    <img style={{height: \"200px\"}} src={establishments[0]} alt={\"\"}/>\r\n            \r\n                </div>\r\n\r\n                <div\r\n                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center rounded\"\r\n                style={{\r\n                    background: `url(${ButtonPlaces})`,\r\n                    backgroundPosition: \"center\",\r\n                    backgroundSize: \"cover\",\r\n                    width: \"15%\",\r\n                    height: \"10%\"\r\n                }}\r\n                >\r\n                    <img style={{width: \"60%\"}} src={NFTLevelText} alt={\"\"}/>\r\n                    <span className=\"visually-hidden\">img</span>\r\n                </div>\r\n                \r\n            </Col>\r\n        </Row>\r\n        <Row className=\"text-center gx-0\" style={{width: \"100%\"}}>\r\n            <Col xs=\"12\">\r\n                <div \r\n                    style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\"\r\n                    }}\r\n                >\r\n                    <img className=\"mt-3 mb-3\" style={{width: \"30%\"}} src={PossibleTargets} alt={\"\"}/>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row className=\"text-center gx-0\">\r\n            <Col xs=\"12\">\r\n                \r\n                <div style={{\r\n                    color: \"white\",\r\n                    background: \"linear-gradient(350deg, rgba(153,102,0,1) 34%, rgba(153,0,153,1) 65%)\"\r\n                    }}>\r\n                \r\n                    \r\n                    <div className=\"d-flex justify-content-evenly align-items-center\">\r\n                        \r\n                    <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className={`mb-1 mt-3 p-2 box-shadow-est`} style={{\r\n                                width: \"80%\", color: \"white\",\r\n                                animation: `${level1Animation} infinite 3s linear`\r\n                                }}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level1Places} alt={\"\"}/>\r\n                                    <span className=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top src={establishments[1]} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={establishments[3]} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex flex-column justify-content-evenly align-items-center\">\r\n                            <Card className={`mb-1 mt-3 p-2 box-shadow-est ${level2Animation}`} style={{\r\n                                width: \"80%\", color: \"white\",\r\n                                animation: `${level2Animation} infinite 3s linear`\r\n                                }}>\r\n                                <div\r\n                                className=\"position-absolute top-0 end-0 text-center d-flex justify-content-center align-items-center\"\r\n                                style={{\r\n                                    background: `url(${ButtonPlaces})`,\r\n                                    backgroundPosition: \"center\",\r\n                                    backgroundSize: \"cover\",\r\n                                    width: \"30%\",\r\n                                    height: \"20%\"\r\n                                }}\r\n                                >\r\n                                    <img style={{width: \"80%\"}} src={Level2Places} alt={\"\"}/>\r\n                                    <span className=\"visually-hidden\">img</span>\r\n                                </div>\r\n                                <CardImg top src={establishments[2]} alt=\"establishment lvl 1\" />\r\n                                <CardBody className=\"text-center\">\r\n                                    <img src={establishments[4]} alt={\"\"}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                                \r\n                    </div>\r\n                    \r\n                    <button style={{\r\n                        background: \"rgb(255,204,0)\",\r\n                        background: \"linear-gradient(180deg, rgba(255,204,0,1) 34%, rgba(255,51,0,1) 65%)\", \r\n                        border: \"0\",\r\n                        color: \"white\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"1.5rem\",\r\n                        width: \"200px\"\r\n                    }} className=\"rounded mt-3 mb-3\" \r\n                    disabled={workButtonInactive}\r\n                    onClick={playGame}>WORK</button>\r\n\r\n                </div>\r\n\r\n            </Col>\r\n        </Row>\r\n    </ModalBody>\r\n\r\n    </Modal>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default RouletteModal;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Spinner\r\n} from \"reactstrap\";\r\n\r\nimport NFTCard from \"./NftCard\";\r\nimport Roulette from \"./Roulette\";\r\nimport GameModal from \"./GameModal\";\r\nimport InstructionsModal from \"./InstructionsModal\";\r\nimport RouletteModal from \"./RouletteModal\";\r\n\r\nimport { updateBetaBalance } from \"../../../ethereum/web3\";\r\n\r\nimport metaMaskLogo from \"../../../assets/metaMask/MetaMask.png\";\r\n\r\nconst getBaseFarm = (monkeyType) => {\r\n    let farmMap = {\r\n      \"1\": 4.55,\r\n      \"2\": 5.05,\r\n      \"3\": 5.25,\r\n      \"4\": 5.55,\r\n      \"5\": 7.25,\r\n      \"6\": 8.30,\r\n      \"7\": 9.25,\r\n      \"8\": 11.10,\r\n      \"9\": 15.30,\r\n      \"10\": 19.75,\r\n      \"11\": 23.95\r\n    };\r\n    return farmMap[monkeyType];\r\n};\r\n\r\nconst GameContainer = (props) => {\r\n\r\n    const [NFTList, setNFTList] = useState(\"load\");\r\n    const [rouletteVars, setRouletteVars] = useState({\r\n      tokenId: \"none\",\r\n      monkeyType: \"1\",\r\n      animationDuration: \"0s\",\r\n      shouldAnimate: false,\r\n      result: 3\r\n    });\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [won, setWon] = useState(false);\r\n    const [wonValue, setWonValue] = useState(0);\r\n\r\n    const [openRouletteModal, setOpenRouletteModal] = useState(false);\r\n    const [rouletteMonkeyType, setRouletteMonkeyType] = useState(\"1\");\r\n    const [rouletteMonkeyLevel, setRouletteMonkeyLevel] = useState(\"1\");\r\n    const [rouletteTokenData, setRouletteTokenData] = useState({});\r\n    const [gameStatus, setGameStatus] = useState(\"preGame\");\r\n    const [timer, setTimer] = useState(\"\");\r\n\r\n    const fetchData = async () => {\r\n      if (window.isUserWallet !== true) {\r\n        setNFTList(\"load\");\r\n        return \"\";\r\n      }\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      const userBalance = await window.nftContract.methods.balanceOf(walletHash[0]).call();\r\n      let dataList = [];\r\n\r\n      for (let i of Array(parseInt(userBalance)).keys()) {\r\n        let nftIndex = await window.nftContract.methods.tokenOfOwnerByIndex(walletHash[0], i).call();\r\n        let nftData = await window.nftContract.methods.getNftData(nftIndex).call();\r\n        dataList.push({nftIndex, nftData});\r\n      }\r\n      setNFTList(dataList);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (NFTList === \"load\") {\r\n        fetchData();\r\n      }\r\n    });\r\n\r\n    const playGame = async () => {\r\n\r\n      let token_id = rouletteTokenData.nftIndex;\r\n      const tokenData = rouletteTokenData;\r\n      setGameStatus(\"playing\");\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      await window.gameContract.methods.baseMining(token_id).send({from: walletHash[0]});\r\n      const gameResult = await window.gameContract.methods.getLastResult(token_id).call();\r\n\r\n      //substitute for blockchain call later\r\n      let baseFarm = getBaseFarm(rouletteTokenData.nftData[0]);\r\n\r\n      if (tokenData.nftData[1] === \"2\") {\r\n        setWon(true);\r\n        let wonAmmount = gameResult === 2 ? 6 * baseFarm : baseFarm;\r\n        setWonValue(wonAmmount);\r\n        updateBetaBalance(wonAmmount);\r\n\r\n      } else {\r\n        if (gameResult === \"2\") {\r\n          setWon(false)\r\n        } else {\r\n          setWon(true);\r\n          setWonValue(baseFarm);\r\n          updateBetaBalance(baseFarm)\r\n        }\r\n      }\r\n      \r\n      setTimeout(() => {\r\n\r\n        if (gameResult === \"1\") {\r\n          setGameStatus(\"game1won\");\r\n        } else if (gameResult === \"2\") {\r\n          setGameStatus(\"game2won\");\r\n        }\r\n      \r\n\r\n        setTimeout(() => {\r\n          setOpenModal(true);\r\n        }, 1000);\r\n\r\n      }, 5000);\r\n      \r\n    };\r\n\r\n    const openGame = (NFT) => {\r\n      console.log(NFT);\r\n      setOpenRouletteModal(true);\r\n      setRouletteTokenData(NFT);\r\n      setRouletteMonkeyType(NFT.nftData[0]);\r\n      setRouletteMonkeyLevel(NFT.nftData[1]);\r\n      setGameStatus(\"preGame\");\r\n    }\r\n\r\n    let NFTCards;\r\n    if (window.isUserWallet !== true) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <img src={metaMaskLogo} alt={\"\"} className='me-3' style={{width: \"50px\", height: \"auto\"}}/>\r\n                  Connect your wallet to see your NFT collection\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList === \"load\") {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  <Spinner type=\"grow\" color=\"warning\" /> \r\n                </CardTitle>\r\n                <CardSubtitle style={{color: \"white\"}}>Loading your collection, please wait</CardSubtitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else if (NFTList.length === 0) {\r\n      NFTCards = (\r\n        <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n            <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n              <CardBody>\r\n                <CardTitle style={{color: \"white\"}}>\r\n                  It looks like you don't own any CryptoMonkeys NFT's yet... It's time to buy some in the portals section!\r\n                </CardTitle>\r\n              </CardBody>\r\n            </Card>\r\n        </Col>\r\n      )\r\n    } else {\r\n      NFTCards = [];\r\n      for (const NFT of NFTList) {\r\n        if (!NFT.nftData[3]) {\r\n          continue;\r\n        }\r\n        let serialNumber = (parseInt(NFT.nftIndex) + 7834).toString();\r\n        NFTCards.push(\r\n          <NFTCard key={NFT.nftIndex} nft_id={NFT.nftIndex} monkeyType={NFT.nftData[0]} monkeyLevel={NFT.nftData[1]} tokenId={serialNumber} playGame={() => openGame(NFT)}/>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <TransitionGroup style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n          <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\r\n            timeout={1500} enter={false} exit={false}>\r\n            <Row className=\"text-center gx-0\" style={{width: \"90%\"}}>\r\n              <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>\r\n                      Time to farm $BNANA <br/>\r\n                      Select your NFTs and farm with them!\r\n                    </CardTitle>\r\n                    <div className=\"divider\" />\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              {NFTCards}\r\n            </Row>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n        <GameModal closeModal={() => setOpenModal(false)} open={openModal} won={won} wonValue={wonValue}/>\r\n        {/* <InstructionsModal closeModal={() => setOpenInstructionsModal(false)} open={openInstructionsModal}/> */}\r\n        <RouletteModal closeModal={() => setOpenRouletteModal(false)} isOpen={openRouletteModal} monkeyType={rouletteMonkeyType} levelNft={rouletteMonkeyLevel} gameStatus={gameStatus} playGame={playGame}/>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default GameContainer;\r\n","import React, { useState } from \"react\";\r\n\r\n// Layout\r\nimport AppHeader from \"../../Layout/AppHeader\";\r\nimport AppSidebar from \"../../Layout/AppSidebar\";\r\n\r\n// Internal components\r\nimport GameContainer from \"./Components/GameContainer\";\r\n\r\nfunction useForceUpdate(){\r\n  const [value, setValue] = useState(0); // integer state\r\n  return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nconst FarmMode = ({ match }) => {\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  return (\r\n    <>\r\n\r\n      <AppHeader forceUpdate={() => forceUpdate()}/>\r\n      <div className=\"app-main\">\r\n        <AppSidebar />\r\n        <div className=\"app-main__outer\">\r\n          <div className=\"app-main__inner p-0\">\r\n            <GameContainer/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default FarmMode;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","workStatus","useState","isCounterSet","setIsCounterSet","counter","setCounter","timeWork","setTimeWork","canWork","setCanWork","monkeyType","monkeyLevel","tokenId","playGame","nft_id","monkeyName","monkeyRarity","code","rarity","rarityColor","className","style","background","color","getMonkeyRarity","useEffect","fetchTimeToWork","window","gameContract","methods","getLastMiningMapping","call","lastMine","getNow","now","nextWork","parseInt","setInterval","missingTime","Date","getTime","hours","minutes","seconds","toString","xs","display","justifyContent","alignItems","width","disabled","onClick","nowSeconds","GameModal","state","backdrop","toggle","bind","this","closeModal","modalText","won","wonValue","isOpen","open","borderColor","disabledButtonUpgrade","React","level1Animation","level2Animation","workButtonInactive","levelNft","gameStatus","establishments","CaveHead","Cave","Forest","CaveName","ForestName","GathererHead","HunterHead","FireBenderHead","FarmerHead","Farm","Castle","FarmName","CastleName","GuardianHead","KingHead","InternHead","Office1","Office2","Office1Name","Office2Name","CryptoInvestorHead","MetaMonkeyHead","Space","Mars","SpaceName","MarsName","CyborgHead","getEstablishments","NFTLevelText","Level1NFT","Level2NFT","height","backgroundColor","backgroundImage","ModalHeaderBg","backgroundPosition","backgroundSize","src","alt","ButtonPlaces","PossibleTargets","animation","Level1Places","top","Level2Places","NFTList","setNFTList","animationDuration","shouldAnimate","result","openModal","setOpenModal","setWon","setWonValue","openRouletteModal","setOpenRouletteModal","rouletteMonkeyType","setRouletteMonkeyType","rouletteMonkeyLevel","setRouletteMonkeyLevel","rouletteTokenData","setRouletteTokenData","setGameStatus","fetchData","isUserWallet","web3Instance","eth","getAccounts","walletHash","nftContract","balanceOf","userBalance","dataList","Array","keys","i","tokenOfOwnerByIndex","nftIndex","getNftData","nftData","push","NFTCards","token_id","tokenData","baseMining","send","from","getLastResult","gameResult","baseFarm","wonAmmount","updateBetaBalance","setTimeout","md","metaMaskLogo","type","length","NFT","serialNumber","console","log","openGame","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","match","forceUpdate","setValue","value","useForceUpdate","AppHeader","AppSidebar","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2"],"sourceRoot":""}