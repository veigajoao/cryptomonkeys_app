{"version":3,"file":"static/js/631.7fee15b2.chunk.js","mappings":"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","sources":["AppPages/Presale/Components/Withdraw.js","AppPages/Presale/index.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardImg,\r\n  Button,\r\n  Spinner,\r\n  Table\r\n} from \"reactstrap\";\r\n\r\nimport metaMaskLogo from \"../../../assets/metaMask/MetaMask.png\";\r\n\r\nconst Withdraw = () => {\r\n\r\n    const [totalBalance, setTotalBalance] = useState(\"0\");\r\n    const [withdrawnBalance, setWithdrawnBalance] = useState(\"0\");\r\n    const [availableBalance, setAvailableBalance] = useState(\"0\");\r\n    const [nonAvailableBalance, setNonAvailableBalance] = useState(\"0\");\r\n    const [needFetch, setNeedFetch] = useState(\"true\");\r\n\r\n    const fetchBalance = async () => {\r\n        if (window.isUserWallet) {\r\n            setNeedFetch(\"load\");\r\n            const walletHash = await window.web3Instance.eth.getAccounts();\r\n          \r\n            const total = window.web3Instance.utils.fromWei(await window.presaleContract.methods.totalBuy(walletHash[0]).call(), \"ether\");\r\n            const withdrawn = window.web3Instance.utils.fromWei(await window.presaleContract.methods.released(walletHash[0]).call(), \"ether\");\r\n            const available = window.web3Instance.utils.fromWei(await window.presaleContract.methods.checkVested(walletHash[0]).call(), \"ether\");\r\n            const nonAvailable = parseInt(total) - parseInt(withdrawn) - parseInt(available);\r\n\r\n            setTotalBalance(total);\r\n            setWithdrawnBalance(withdrawn);\r\n            setAvailableBalance(available);\r\n            setNonAvailableBalance(nonAvailable);\r\n            \r\n            setNeedFetch(\"false\");\r\n          } else {\r\n            setNeedFetch(\"true\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (needFetch === \"true\") {\r\n        fetchBalance();\r\n      }\r\n    });\r\n\r\n    const withdrawBalance = async () => {\r\n      const walletHash = await window.web3Instance.eth.getAccounts();\r\n      await window.presaleContract.methods.releaseTokens().send({from: walletHash[0]});\r\n      fetchBalance();\r\n    }\r\n\r\n    let internalContent;\r\n    if (window.isUserWallet !== true) {\r\n      internalContent = (\r\n        <Row noGutters className=\"text-center mt-3\">\r\n          <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                <CardBody>\r\n                  <CardTitle style={{color: \"white\"}}>\r\n                    <img src={metaMaskLogo} alt={\"\"} className='me-3' style={{width: \"50px\", height: \"auto\"}}/>\r\n                    Connect your wallet to see your vesting presale balance\r\n                  </CardTitle>\r\n                </CardBody>\r\n              </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    } else if (needFetch === \"load\") {\r\n      internalContent = (\r\n        <Row noGutters className=\"text-center mt-3\">\r\n          <Col xs=\"12\" md=\"12\" style={{display: \"flex\", justifyContent: \"center\"}}>\r\n              <Card className=\"mb-1 mt-2\" style={{width: \"80%\", background: \"#240940\", color: \"white\"}}>\r\n                <CardBody>\r\n                  <CardTitle style={{color: \"white\"}}>\r\n                    <Spinner type=\"grow\" color=\"warning\" /> \r\n                  </CardTitle>\r\n                  <CardSubtitle style={{color: \"white\"}}>Loading your balance, please wait</CardSubtitle>\r\n                </CardBody>\r\n              </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    } else {\r\n\r\n      internalContent = (\r\n        <>\r\n          <Row noGutters className=\"text-center mt-3\">\r\n            <p style={{color: \"white\"}}>\r\n              You can see the information regarding your presale BNANA purchases in here. Once your tokens'\r\n              vesting period is over, they'll appear on the withdrawable amounts in the table below.\r\n            </p>\r\n            <Table style={{color: \"white\"}}>\r\n              <tbody>\r\n                <tr>\r\n                  <td>Total presale purchase</td>\r\n                  <td>{totalBalance}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Already released tokens</td>\r\n                  <td>{withdrawnBalance}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Locked tokens</td>\r\n                  <td>{nonAvailableBalance}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Withdrawable amount</td>\r\n                  <td>{availableBalance}</td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </Row>\r\n          <Button onClick={() => withdrawBalance()} color=\"primary\">Withdraw balance</Button>\r\n        </>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <TransitionGroup style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n          <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\r\n            timeout={1500} enter={false} exit={false}>\r\n            <Row noGutters className=\"text-center\" style={{width: \"90%\"}}>\r\n              <Col md=\"12\">\r\n                <Card className=\"main-card mb-3 mt-3\" style={{background: \"#561473\"}}>\r\n                  <CardBody>\r\n                    <CardTitle style={{color: \"white\"}}>Withdrawal your $BNANAS</CardTitle>\r\n                    <div className=\"divider\" />\r\n                    {internalContent}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default Withdraw;\r\n","import React, { useState } from \"react\";\r\n\r\n// Layout\r\nimport AppHeader from \"../../Layout/AppHeader\";\r\nimport AppSidebar from \"../../Layout/AppSidebar\";\r\n\r\n// Internal components\r\nimport Withdraw from \"./Components/Withdraw\";\r\n\r\nfunction useForceUpdate(){\r\n  const [value, setValue] = useState(0); // integer state\r\n  return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nconst Presale = ({ match }) => {\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  return (\r\n    <>\r\n      <AppHeader forceUpdate={() => forceUpdate()}/>\r\n      <div className=\"app-main\">\r\n        <AppSidebar />\r\n        <div className=\"app-main__outer\">\r\n          <div className=\"app-main__inner p-0\">\r\n            <Withdraw/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Presale;\r\n"],"names":["useState","totalBalance","setTotalBalance","withdrawnBalance","setWithdrawnBalance","availableBalance","setAvailableBalance","nonAvailableBalance","setNonAvailableBalance","needFetch","setNeedFetch","fetchBalance","window","isUserWallet","web3Instance","eth","getAccounts","walletHash","utils","presaleContract","methods","totalBuy","call","total","fromWei","released","withdrawn","checkVested","available","nonAvailable","parseInt","useEffect","internalContent","withdrawBalance","releaseTokens","send","from","noGutters","className","xs","md","style","display","justifyContent","width","background","color","src","metaMaskLogo","alt","height","type","onClick","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","match","forceUpdate","setValue","value","useForceUpdate","AppHeader","AppSidebar"],"sourceRoot":""}